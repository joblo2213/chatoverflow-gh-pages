{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Wiki for chatoverflow version 3.0.1-prealpha Welcome to the Chat Overflow wiki! \u00b6 Please use the sidebar for navigation.","title":"Home"},{"location":"#welcome-to-the-chat-overflow-wiki","text":"Please use the sidebar for navigation.","title":"Welcome to the Chat Overflow wiki!"},{"location":"development/Adding-a-new-platform-source/","text":"Thank you for improving Chat Overflow . While plugins live in their own project, source connections (e.g. to a platform like Twitch or Discord) exist in the framework itself. We made this design choice so that all platform source connectors are free to access by all plugin developers. This wiki entry tries to show you the different steps needed to implement a new connection. Add new types to the API (Also register them in the requirement Input/Output section) Create a new package in the framework services package and implement the source specific connector Create a impl package and implement the types you have added in the API Enhance your connector with metadata Add new types to the API \u00b6 Add all needed data transfer objects in org.codeoverflow.chatoverflow.api.io.dto and interfaces representing input / output to the correct API package. E.g., a chat input belongs to org.codeoverflow.chatoverflow.api.io.input.chat and should extend ChatInput . We require you to also register your new type in the corresponding requirement class located in org.codeoverflow.chatoverflow.api.plugin.configuration . Yes, this step could be automated by using reflection, but by providing a clean interface to the plugin developer we protect type safety. Add a new package and connector \u00b6 Create a new package inside the service package of the framework: org.codeoverflow.chatoverflow.requirement.service . Next, implement a connector that extends org.codeoverflow.chatoverflow.connector.Connector which takes login data and creates a connection to the new platform. Use the lists requiredCredentialKeys and optionalCredentialKeys to set what login data you need and the credentials object to get the actual data. Implement the code that sets up the connection in the start() method and the code that closes the connection on shutdown in stop() . For logging use the logger provided by the WithLogger trait. A very basic example is the org.codeoverflow.chatoverflow.requirement.service.sample.SampleConnector . Just use the helper impl classes InputImpl and OutputImpl With this connector, you can now implement the interfaces you just added to the API. E.g. 1 2 3 4 5 6 7 @Impl ( impl = classOf [ SampleInput ] , connector = classOf [ SampleConnector ] ) class SampleInputImpl extends InputImpl [ SampleConnector ] with SampleInput with WithLogger { override def start () : Boolean = ... override def stop () : Boolean = ... } Important: The @Impl-annotation will guide the framework to load your new connector and types. Metadata \u00b6 To guide the user while adding new connectors / platform sources, we ask you to provide some metadata for your connector. Create a XML-file with the full name of your connector type, e.g. org.codeoverflow.chatoverflow.requirement.service.discord.discordchatconnector.xml inside the main/resources/connector -folder of the project. This file should contain the following information: 1 2 3 4 5 6 7 8 <connector> <display> The Display Name </display> <description> A short description </description> <wiki> A link to the corresponding wiki entry </wiki> <icon48> a base64 encoded 48x48 png file </icon48> </connector> Note that this step is optional, but highly recommended.","title":"Adding a new platform source"},{"location":"development/Adding-a-new-platform-source/#add-new-types-to-the-api","text":"Add all needed data transfer objects in org.codeoverflow.chatoverflow.api.io.dto and interfaces representing input / output to the correct API package. E.g., a chat input belongs to org.codeoverflow.chatoverflow.api.io.input.chat and should extend ChatInput . We require you to also register your new type in the corresponding requirement class located in org.codeoverflow.chatoverflow.api.plugin.configuration . Yes, this step could be automated by using reflection, but by providing a clean interface to the plugin developer we protect type safety.","title":"Add new types to the API"},{"location":"development/Adding-a-new-platform-source/#add-a-new-package-and-connector","text":"Create a new package inside the service package of the framework: org.codeoverflow.chatoverflow.requirement.service . Next, implement a connector that extends org.codeoverflow.chatoverflow.connector.Connector which takes login data and creates a connection to the new platform. Use the lists requiredCredentialKeys and optionalCredentialKeys to set what login data you need and the credentials object to get the actual data. Implement the code that sets up the connection in the start() method and the code that closes the connection on shutdown in stop() . For logging use the logger provided by the WithLogger trait. A very basic example is the org.codeoverflow.chatoverflow.requirement.service.sample.SampleConnector . Just use the helper impl classes InputImpl and OutputImpl With this connector, you can now implement the interfaces you just added to the API. E.g. 1 2 3 4 5 6 7 @Impl ( impl = classOf [ SampleInput ] , connector = classOf [ SampleConnector ] ) class SampleInputImpl extends InputImpl [ SampleConnector ] with SampleInput with WithLogger { override def start () : Boolean = ... override def stop () : Boolean = ... } Important: The @Impl-annotation will guide the framework to load your new connector and types.","title":"Add a new package and connector"},{"location":"development/Adding-a-new-platform-source/#metadata","text":"To guide the user while adding new connectors / platform sources, we ask you to provide some metadata for your connector. Create a XML-file with the full name of your connector type, e.g. org.codeoverflow.chatoverflow.requirement.service.discord.discordchatconnector.xml inside the main/resources/connector -folder of the project. This file should contain the following information: 1 2 3 4 5 6 7 8 <connector> <display> The Display Name </display> <description> A short description </description> <wiki> A link to the corresponding wiki entry </wiki> <icon48> a base64 encoded 48x48 png file </icon48> </connector> Note that this step is optional, but highly recommended.","title":"Metadata"},{"location":"development/Deploy-ChatOverflow/","text":"Chat Overflow has two different kinds of deployments: a end-user deployment that is only able to run plugins and a plugin developer deployment that can also be used to create plugins. These deployments are usually generated and published to the world when a new version of Chat Overflow is released. End-User Deployment \u00b6 To create a deployment for end-users that only want to run plugins and use the framework follow these steps: Execute the IntelliJ run configuration [Deploy] Generate Bootstrap Launcher and deploy or run the make target with make bootstrap_deploy . This bundles everything and copies it along with start scripts, the license and a readme to the deploy -folder. Magic. Create a zip archive of the deploy directory. The deploy -folder contains the bootstrap launcher that can be started with the start scripts or with java -jar ChatOverflow.jar . It then downloads all required libraries, which are specified in the dependencies.pom file that is included in the jar file of the framework, to the local cache using Coursier and starts Chat Overflow. The folder-structure of the end-user deployment is as follows: 1 2 3 4 5 6 deploy/ \u251c\u2500\u2500bin/ Jars of the API, the framework and the GUI \u251c\u2500\u2500ChatOverflow.jar Fat-Jar of the bootstrap launcher \u251c\u2500\u2500ChatOverflow.* Start scripts for various platforms \u251c\u2500\u2500LICENSE EPL-2.0 license \u2514\u2500\u2500README.html A readme with starter information If the framework has been started once it will create directories for config files, data files of plugins and plugin jars. These directories and their contents are NOT to be included in the deployment zip file. Plugin Developer Deployment \u00b6 To create a deployment for plugin dev that not only want to run plugin, but also want to develop them follow these steps: Execute the IntelliJ run configuration [DeployDev] Deploy Plugin Dev Environment or use make to create the deployment by executing make bootstrap_deploy_dev . Create a zip archive of the deployDev directory. A plugin developer deployment contains the framework and the GUI in jars, the api in form of source code and sbt scripts (e.g. create and fetch) to be able to create and compile plugins. The folder-structure of the plugin-dev deployment is as follows: 1 2 3 4 5 6 7 8 deployDev/ \u251c\u2500\u2500.idea/ IntelliJ run configurations \u251c\u2500\u2500api/ The api project in source code \u251c\u2500\u2500bin/ Jars of the framework and the GUI \u251c\u2500\u2500project/ Contains a jar of the chatoverflow-build code \u251c\u2500\u2500build.sbt Main sbt file, contains general settings and task definitons \u251c\u2500\u2500dependencies.sbt Imports all dependencies of the framework \u2514\u2500\u2500LICENSE EPL-2.0 license","title":"Deploy ChatOverflow"},{"location":"development/Deploy-ChatOverflow/#end-user-deployment","text":"To create a deployment for end-users that only want to run plugins and use the framework follow these steps: Execute the IntelliJ run configuration [Deploy] Generate Bootstrap Launcher and deploy or run the make target with make bootstrap_deploy . This bundles everything and copies it along with start scripts, the license and a readme to the deploy -folder. Magic. Create a zip archive of the deploy directory. The deploy -folder contains the bootstrap launcher that can be started with the start scripts or with java -jar ChatOverflow.jar . It then downloads all required libraries, which are specified in the dependencies.pom file that is included in the jar file of the framework, to the local cache using Coursier and starts Chat Overflow. The folder-structure of the end-user deployment is as follows: 1 2 3 4 5 6 deploy/ \u251c\u2500\u2500bin/ Jars of the API, the framework and the GUI \u251c\u2500\u2500ChatOverflow.jar Fat-Jar of the bootstrap launcher \u251c\u2500\u2500ChatOverflow.* Start scripts for various platforms \u251c\u2500\u2500LICENSE EPL-2.0 license \u2514\u2500\u2500README.html A readme with starter information If the framework has been started once it will create directories for config files, data files of plugins and plugin jars. These directories and their contents are NOT to be included in the deployment zip file.","title":"End-User Deployment"},{"location":"development/Deploy-ChatOverflow/#plugin-developer-deployment","text":"To create a deployment for plugin dev that not only want to run plugin, but also want to develop them follow these steps: Execute the IntelliJ run configuration [DeployDev] Deploy Plugin Dev Environment or use make to create the deployment by executing make bootstrap_deploy_dev . Create a zip archive of the deployDev directory. A plugin developer deployment contains the framework and the GUI in jars, the api in form of source code and sbt scripts (e.g. create and fetch) to be able to create and compile plugins. The folder-structure of the plugin-dev deployment is as follows: 1 2 3 4 5 6 7 8 deployDev/ \u251c\u2500\u2500.idea/ IntelliJ run configurations \u251c\u2500\u2500api/ The api project in source code \u251c\u2500\u2500bin/ Jars of the framework and the GUI \u251c\u2500\u2500project/ Contains a jar of the chatoverflow-build code \u251c\u2500\u2500build.sbt Main sbt file, contains general settings and task definitons \u251c\u2500\u2500dependencies.sbt Imports all dependencies of the framework \u2514\u2500\u2500LICENSE EPL-2.0 license","title":"Plugin Developer Deployment"},{"location":"development/Pluggable-migration-guide/","text":"If you have updated from prealpha 2 to prealpha 3 you might notice that your plugins aren't detected by the framework anymore and are also not included in plugins.sbt by the sbt fetch task. This is because as of 3.0.0-prealpha Pluggable got removed and replaced with a xml file called plugin.xml in the resources of the plugin. Check the issue at codeoverflow-org/chatoverflow#41 or the pr at codeoverflow-org/chatoverflow#91 for more information about this rework. Here are the required steps to make your plugin compatible with the new format: Delete your class implementing Pluggable . Its not used anymore and got removed from the api. Create the resources directory at yourPlugin/src/main/resources . Create a file at yourPlugin/src/main/resources/plugin.xml containing the following: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 <plugin> <name> myPluginName </name> <author> sebinside </author> <description> This is a simple plugin for demonstration purposes. </description> <api> <major> 3 </major> <minor> 0 </minor> </api> <version> 0.3.0 </version> <website> http://codeoverflow.org </website> <sourceRepo> https://github.com/codeoverflow-org/chatoverflow-plugins </sourceRepo> <bugtracker> https://github.com/codeoverflow-org/chatoverflow/issues </bugtracker> <license> EPL-2.0 </license> </plugin> Replace these values with yours. Name, author, api and version are mandatory while the other ones aren't and can be omitted by remove the xml tag. Note that you also may need to adjust the api version numbers if you are running a newer version.","title":"Pluggable migration guide"},{"location":"development/Release-ChatOverflow/","text":"The scope of this article is to serve all Chat Overflow team members when releasing a new version. As stated in the versioning article , this might be the case for: New releases ( MAJOR ): New major feature releases with (breaking) API-Updates. New major releases are always documented in the milestone -section of the github issue tracker. Feature-Upgrades ( MINOR ): Small feature upgrades, which do not require any breaking API-Updates and can be pushed earlier. Bugfixes / Hotfixes ( PATCH ): Updates to resolve bugs inside any part of the Chat Overflow project. This article guides you through the process of building, deploying and releasing new Chat Overflow versions. Please read versioning , deploying , and working with npm first and if there are any questions (or there is some information missing in the article), feel free to contact us. Overview \u00b6 The (major) release of a new Chat Overflow version can be summarized in four steps: Prepare Environment Deploy new version Release Post-Release 1. Prepare \u00b6 First, everything has to be prepared for a new release. Make sure, that all current issues are resolved (for a minor release) or all issues for a major milestone are done. Update (all) version numbers (have a look at the versioning -article). If this is a major release, this step has probably already been done (see chapter 4). Merge the master branches of the six sub-projects into the develop branches. Make sure, that all new features are now available in the develop -branch. Resolve all merge issues. This does apply to: Chat Overflow Framework (main repository) Chatoverflow-API Chatoverflow-Plugins Chatoverflow-Launcher Chatoverflow-GUI Chatoverflow-Setup Chatoverflow-Wiki (make sure not to break things here!) Test the current version at least with the testall -plugin to make sure, that there are not major flaws left. Make sure to execute the [Advanced] -task this time to rebuild everything. Create a new version of the npm-package with the new version or at least a new build version. Push your local, prepared version of all projects and mention the release state in the commit message. 2. Deploy \u00b6 After these steps, there is a merged and \"tested\" version of Chat Overflow available. Now, it's time to deploy : Use the [Deploy] -task to create a deployed version of the Chat Overflow project. Copy these files to a different directory. Then use the [DeployDev] -task to create a version of Chat Overflow for plugin developers. Do also copy this files to a different folder. For both environments / deployed versions, execute your copied versions and make sure, that everything is downloaded and starts correctly and all runtime files (e.g. the config -files) are generated. Return to your original, deployed versions. Zip them in separate files. Make sure to include all needed files but none of the generated files of your runtime versions (see deploying for more information). 3. Release \u00b6 With the two deployed versions of Chat Overflow, we are now ready to release! Upload the Chat Overflow API to the Github Maven Package Registry. For initial setup, create this file ~/.sbt/1.0/gpr-codeoverflow.sbt with the following content: 1 2 3 4 5 6 credentials += Credentials ( \"GitHub Package Registry\" , \"maven.pkg.github.com\" , \"<GITHUB_USERNAME>\" , \"<GITHUB_TOKEN>\" ) Then, you can simply publish a new version (the version of the main api sbt file is used) by executing sbt apiProject/publish . Draft a new release . Set the tag version to the version to release (following the main sbt version) and the target to the develop -branch. Write release notes. These notes should at least contain the following information: Generic information, (major) changes, pull requests. Just have a look at existent releases . Upload both zip files with the deployed (and plugin-dev-deployed) versions of Chat Overflow. Double check again, that every step is completed and everything looks fine. Then, release ! 4. Post-Release \u00b6 After the release, some things have to be cleaned up. By releasing, the current state of the selected branch in the main project is automatically tagged with the release version, e.g. v3.2.1 . All other current states of all other projects (e.g. API, GUI, and so on) have to be tagged, too. Merge the current states of all develop -branches in the master -branches, since these should always contain the currently released version. This should cause no problems though, because you already merged the master -branches in chapter 1. But it opens up new space for a new development version. Add a commit to all develop -branches, incrementing the version number. If the increment is major or minor has to be determined first. Delete all dead branches on all projects. This is applicable to all branches, which have been successfully merged into the develop - or master -branch and whose issue has been closed. If you're not sure about a branch, please ask first. That's it. Get yourself a cup of coffee, take a nap or cry in pain. A new version of Chat Overflow has been released, and it's time to start over again with the development of the next release. Thank you!","title":"Releasing"},{"location":"development/Release-ChatOverflow/#overview","text":"The (major) release of a new Chat Overflow version can be summarized in four steps: Prepare Environment Deploy new version Release Post-Release","title":"Overview"},{"location":"development/Release-ChatOverflow/#1-prepare","text":"First, everything has to be prepared for a new release. Make sure, that all current issues are resolved (for a minor release) or all issues for a major milestone are done. Update (all) version numbers (have a look at the versioning -article). If this is a major release, this step has probably already been done (see chapter 4). Merge the master branches of the six sub-projects into the develop branches. Make sure, that all new features are now available in the develop -branch. Resolve all merge issues. This does apply to: Chat Overflow Framework (main repository) Chatoverflow-API Chatoverflow-Plugins Chatoverflow-Launcher Chatoverflow-GUI Chatoverflow-Setup Chatoverflow-Wiki (make sure not to break things here!) Test the current version at least with the testall -plugin to make sure, that there are not major flaws left. Make sure to execute the [Advanced] -task this time to rebuild everything. Create a new version of the npm-package with the new version or at least a new build version. Push your local, prepared version of all projects and mention the release state in the commit message.","title":"1. Prepare"},{"location":"development/Release-ChatOverflow/#2-deploy","text":"After these steps, there is a merged and \"tested\" version of Chat Overflow available. Now, it's time to deploy : Use the [Deploy] -task to create a deployed version of the Chat Overflow project. Copy these files to a different directory. Then use the [DeployDev] -task to create a version of Chat Overflow for plugin developers. Do also copy this files to a different folder. For both environments / deployed versions, execute your copied versions and make sure, that everything is downloaded and starts correctly and all runtime files (e.g. the config -files) are generated. Return to your original, deployed versions. Zip them in separate files. Make sure to include all needed files but none of the generated files of your runtime versions (see deploying for more information).","title":"2. Deploy"},{"location":"development/Release-ChatOverflow/#3-release","text":"With the two deployed versions of Chat Overflow, we are now ready to release! Upload the Chat Overflow API to the Github Maven Package Registry. For initial setup, create this file ~/.sbt/1.0/gpr-codeoverflow.sbt with the following content: 1 2 3 4 5 6 credentials += Credentials ( \"GitHub Package Registry\" , \"maven.pkg.github.com\" , \"<GITHUB_USERNAME>\" , \"<GITHUB_TOKEN>\" ) Then, you can simply publish a new version (the version of the main api sbt file is used) by executing sbt apiProject/publish . Draft a new release . Set the tag version to the version to release (following the main sbt version) and the target to the develop -branch. Write release notes. These notes should at least contain the following information: Generic information, (major) changes, pull requests. Just have a look at existent releases . Upload both zip files with the deployed (and plugin-dev-deployed) versions of Chat Overflow. Double check again, that every step is completed and everything looks fine. Then, release !","title":"3. Release"},{"location":"development/Release-ChatOverflow/#4-post-release","text":"After the release, some things have to be cleaned up. By releasing, the current state of the selected branch in the main project is automatically tagged with the release version, e.g. v3.2.1 . All other current states of all other projects (e.g. API, GUI, and so on) have to be tagged, too. Merge the current states of all develop -branches in the master -branches, since these should always contain the currently released version. This should cause no problems though, because you already merged the master -branches in chapter 1. But it opens up new space for a new development version. Add a commit to all develop -branches, incrementing the version number. If the increment is major or minor has to be determined first. Delete all dead branches on all projects. This is applicable to all branches, which have been successfully merged into the develop - or master -branch and whose issue has been closed. If you're not sure about a branch, please ask first. That's it. Get yourself a cup of coffee, take a nap or cry in pain. A new version of Chat Overflow has been released, and it's time to start over again with the development of the next release. Thank you!","title":"4. Post-Release"},{"location":"development/Setting-up-the-Build-Environment/","text":"This short tutorial is meant for developers and shows how to setup the build environment. If you want to install and run ChatOverflow head over to Installation . Prerequisites \u00b6 For working on chatoverflow the following tools must be installed on your PC: Java 8 version 1.8.0_161 or newer git - version control system sbt - Scala build tool yarn or npm - package manager Windows \u00b6 Save the \ud83d\udcc4 install.bat to the directory where you want to install the build environment. Execute the script, use the --dev argument if you want to check out the development branch automatically. If you want to do an advanced build directly after the installation use the --build flag. Drink some coffee while the script clones all repositories, sets up sbt and installs the gui. Start developing! UNIX operating systems (MacOs / Linux) \u00b6 Save the \ud83d\udcc4 install.sh to the directory where you want to install the build environment. Execute the script, use the --dev argument if you want to check out the development branch automatically. If you want to do an advanced build directly after the installation use the --build flag. Drink some coffee while the script clones all repositories, sets up sbt and installs the gui. Start developing! Alternative \u00b6 This command downloads the script and executes it: shell script bash <(curl -s https://raw.githubusercontent.com/codeoverflow-org/chatoverflow-setup/master/install.sh)","title":"Build Environment"},{"location":"development/Setting-up-the-Build-Environment/#prerequisites","text":"For working on chatoverflow the following tools must be installed on your PC: Java 8 version 1.8.0_161 or newer git - version control system sbt - Scala build tool yarn or npm - package manager","title":"Prerequisites"},{"location":"development/Setting-up-the-Build-Environment/#windows","text":"Save the \ud83d\udcc4 install.bat to the directory where you want to install the build environment. Execute the script, use the --dev argument if you want to check out the development branch automatically. If you want to do an advanced build directly after the installation use the --build flag. Drink some coffee while the script clones all repositories, sets up sbt and installs the gui. Start developing!","title":"Windows"},{"location":"development/Setting-up-the-Build-Environment/#unix-operating-systems-macos-linux","text":"Save the \ud83d\udcc4 install.sh to the directory where you want to install the build environment. Execute the script, use the --dev argument if you want to check out the development branch automatically. If you want to do an advanced build directly after the installation use the --build flag. Drink some coffee while the script clones all repositories, sets up sbt and installs the gui. Start developing!","title":"UNIX operating systems (MacOs / Linux)"},{"location":"development/Setting-up-the-Build-Environment/#alternative","text":"This command downloads the script and executes it: shell script bash <(curl -s https://raw.githubusercontent.com/codeoverflow-org/chatoverflow-setup/master/install.sh)","title":"Alternative"},{"location":"development/Structure/","text":"The chat overflow project is divided in several components. The following diagrams show a simplified view of the project.","title":"Structure"},{"location":"development/Versioning/","text":"This article summarizes how we handle versioning in the Chat Overflow project. This is primarily relevant for team members while releasing new builds but also for every other developer. The scope of this article is versioning , not version control . Obviously, we use git and every component is available through github. Versioned artefacts \u00b6 The following components / artefacts / parts of the Chat Overflow project have a dedicated version number: Framework (contains startup code and service implementation, specifies release version) API (contains interfaces to connect every plugin to the framework, specifies executable plugin versions) REST-API (used to control the framework) NPM package version (used for client bindings to the REST-API, should always be the same as above) GUI (the version of the frontend implementation) These versions are displayed while the framework is starting. Please note, that we do not display dedicated versions for the build environment or the (bootstrap) launcher / updater. Install scripts and plugin versions are out of scope, too. Although these artefacts are usually deployed together, the specific version numbers are independent. The framework version does always include all changes and specifies the release version. Versioning \u00b6 We use semantic versioning, which is documented here . Semantic version numbers have the following pattern: MAJOR.MINOR.PATCH . To summarize: Major changes are new releases with API-incompatible changes Minor changes are e.g. new features which do not break the current API Patch changes fix bugs and are compatible to the current release and its features Following the guidelines of semantic versioning, version 3.2.1 should be compatible with 3.4.5 but not with 4.0.0 . There are, however, two exceptions: The REST-API and NPM package for the REST-API client bindings have an additional build number, e.g. 3.2.5-8 . This mechanism is used to enable easier development workflow with snapshot versions. This has no impact to plugin devs or end users. Besides these two exceptions where version numbers change while a new release is developed, a version number change should always cause a new release.","title":"Versioning"},{"location":"development/Versioning/#versioned-artefacts","text":"The following components / artefacts / parts of the Chat Overflow project have a dedicated version number: Framework (contains startup code and service implementation, specifies release version) API (contains interfaces to connect every plugin to the framework, specifies executable plugin versions) REST-API (used to control the framework) NPM package version (used for client bindings to the REST-API, should always be the same as above) GUI (the version of the frontend implementation) These versions are displayed while the framework is starting. Please note, that we do not display dedicated versions for the build environment or the (bootstrap) launcher / updater. Install scripts and plugin versions are out of scope, too. Although these artefacts are usually deployed together, the specific version numbers are independent. The framework version does always include all changes and specifies the release version.","title":"Versioned artefacts"},{"location":"development/Versioning/#versioning","text":"We use semantic versioning, which is documented here . Semantic version numbers have the following pattern: MAJOR.MINOR.PATCH . To summarize: Major changes are new releases with API-incompatible changes Minor changes are e.g. new features which do not break the current API Patch changes fix bugs and are compatible to the current release and its features Following the guidelines of semantic versioning, version 3.2.1 should be compatible with 3.4.5 but not with 4.0.0 . There are, however, two exceptions: The REST-API and NPM package for the REST-API client bindings have an additional build number, e.g. 3.2.5-8 . This mechanism is used to enable easier development workflow with snapshot versions. This has no impact to plugin devs or end users. Besides these two exceptions where version numbers change while a new release is developed, a version number change should always cause a new release.","title":"Versioning"},{"location":"development/Working-with-NPM/","text":"We use a npm package to connect the REST-API to our web client. The package is generated using swagger annotations in our scala implementation of the interface. By this approach we ensure maximum reliability while having minimal manual implementation effort. The npm package is hosted with the new github package registry and can be found here . This article describes, how new versions of the package with the client bindings can be generated and published. This is important for team members and everyone interested in (G)UI development. Prerequisites \u00b6 There are three basic steps for settings started with this process. Install node / npm . If you have it already installed, make sure to update it to the last release using sudo npm install -g npm@latest . Login to the github package registry. This is described here . Basically, it's one console command using a personal token from your github user settings : npm login --registry=https://npm.pkg.github.com Download the latest 2.x -version of swagger-codegen-cli . It can be found on maven . Please make sure, that you do not use the 3.x .-version, since it is not compatible with your current framework dependencies. At the time of writing this article, the latest 2.x -version is 2.4.9 . Build \u00b6 Next up, you can build a new version of the npm package. This is also applicable, if you won't publish the package and just want to test something locally. Start by increasing the build-part of the version number of the REST-API by 1. It can be found the VersionInfo -file (called rest ). The build number is the last part, e.g. going from 3.0.0-5 to 3.0.0-6 . This step is only needed once per published version of your npm package build. Start the framework and make sure, that the build version increase worked and your changes to the REST-API are available. Generate the npm package using swagger-codegen-cli . This can be achieved with the following console command (the backslahes are only needed for *nix-systems): 1 2 3 4 5 java -jar swagger-codegen-cli-2.4.9.jar generate \\ -i http://localhost:2400/api-docs/swagger.json \\ -l typescript-angular \\ -o ./angular_api_client \\ --additional-properties npmName=@codeoverflow-org/chatoverflow,snapshot=false,npmVersion=x.x.x-x,ngVersion=7.2.1 Make sure to replace the npm-version with the version number you have used in the VersionInfo -file, e.g. 3.0.0-6 . Next, some dependencies have to be installed. Navigate into your generated folder by using cd angular_api_client , then execute the following install-commands: 1 2 npm install -- save - dev typescript @3.2.4 npm install -- save - dev tsickle @0.35.0 After this, you have to update the generated package.json -file to make sure, that the package is published correctly to the github package registry. Add the following lines: 1 2 \"publishConfig\": { \"registry\": \"https://npm.pkg.github.com/\" }, \"repository\": \"git://github.com/codeoverflow-org/chatoverflow.git\", There is only one configuration step left: Add a new file called .npmrc to the generated folder, containing the following line: 1 registry=https://npm.pkg.github.com/codeoverflow-org Now, everything is ready. You can now install and build your generated package: 1 2 npm install npm run build That's it. You have now a ready-to-use npm package with all the bindings for the REST-API, optimized for typescript in angular. Publish \u00b6 To publish your freshly build version of the npm package, use the following command. Make sure, that you have the right to do so; and never forget the dist part. 1 npm publish dist Now, you can open the package.json file of the chatoverflow-gui project and update the version of the dependency @codeoverflow-org/chatoverflow to your new version. Simply run npm install afterwards and rebuild the gui.","title":"Working with NPM"},{"location":"development/Working-with-NPM/#prerequisites","text":"There are three basic steps for settings started with this process. Install node / npm . If you have it already installed, make sure to update it to the last release using sudo npm install -g npm@latest . Login to the github package registry. This is described here . Basically, it's one console command using a personal token from your github user settings : npm login --registry=https://npm.pkg.github.com Download the latest 2.x -version of swagger-codegen-cli . It can be found on maven . Please make sure, that you do not use the 3.x .-version, since it is not compatible with your current framework dependencies. At the time of writing this article, the latest 2.x -version is 2.4.9 .","title":"Prerequisites"},{"location":"development/Working-with-NPM/#build","text":"Next up, you can build a new version of the npm package. This is also applicable, if you won't publish the package and just want to test something locally. Start by increasing the build-part of the version number of the REST-API by 1. It can be found the VersionInfo -file (called rest ). The build number is the last part, e.g. going from 3.0.0-5 to 3.0.0-6 . This step is only needed once per published version of your npm package build. Start the framework and make sure, that the build version increase worked and your changes to the REST-API are available. Generate the npm package using swagger-codegen-cli . This can be achieved with the following console command (the backslahes are only needed for *nix-systems): 1 2 3 4 5 java -jar swagger-codegen-cli-2.4.9.jar generate \\ -i http://localhost:2400/api-docs/swagger.json \\ -l typescript-angular \\ -o ./angular_api_client \\ --additional-properties npmName=@codeoverflow-org/chatoverflow,snapshot=false,npmVersion=x.x.x-x,ngVersion=7.2.1 Make sure to replace the npm-version with the version number you have used in the VersionInfo -file, e.g. 3.0.0-6 . Next, some dependencies have to be installed. Navigate into your generated folder by using cd angular_api_client , then execute the following install-commands: 1 2 npm install -- save - dev typescript @3.2.4 npm install -- save - dev tsickle @0.35.0 After this, you have to update the generated package.json -file to make sure, that the package is published correctly to the github package registry. Add the following lines: 1 2 \"publishConfig\": { \"registry\": \"https://npm.pkg.github.com/\" }, \"repository\": \"git://github.com/codeoverflow-org/chatoverflow.git\", There is only one configuration step left: Add a new file called .npmrc to the generated folder, containing the following line: 1 registry=https://npm.pkg.github.com/codeoverflow-org Now, everything is ready. You can now install and build your generated package: 1 2 npm install npm run build That's it. You have now a ready-to-use npm package with all the bindings for the REST-API, optimized for typescript in angular.","title":"Build"},{"location":"development/Working-with-NPM/#publish","text":"To publish your freshly build version of the npm package, use the following command. Make sure, that you have the right to do so; and never forget the dist part. 1 npm publish dist Now, you can open the package.json file of the chatoverflow-gui project and update the version of the dependency @codeoverflow-org/chatoverflow to your new version. Simply run npm install afterwards and rebuild the gui.","title":"Publish"},{"location":"development/Writing-a-plugin/","text":"Important: Chat Overflow is still work in progress. So this guide will probably change in the future! There are 3 important steps when you want to create and implement a new chat overflow plugin: Create a new plugin project with the commands of the framework Inspect the plugin.xml file Extend the plugin with own logic Create a new plugin project \u00b6 Use the Create Plugin run configuration or start the custom task sbt create directly. Enter the basic plugin information in the command prompt. This includes mandatory values like the name, author, version and base plugin folder (e.g. plugins-public ) and some optional values like a description, a website, a link to a source repo, a link to a bug tracker and a license. The command creates the folder structure of the new plugin and adds a basic build file. Here you can also add custom dependencies. In addition the command generates a basic plugin.xml containing all the passed information like name and description and a basic source code file generated in the language of your choice to get you started. Note that currently only Scala and Java are supported. Next, run the custom task sbt fetch to let the framework look for new plugins and update the plugin reference file plugins.sbt . If you're using IntelliJ, you can now reload the framework manually to register the plugin as a new custom project. You should also run sbt reload (Yes, both actions have different effects although they shouldn't). Inspect the plugin.xml file \u00b6 All the metadata of the plugin like the name and the author of the plugin is saved in a xml file which is located at src/main/resources/plugin.xml in the plugin directory. This file gets autogenerated by the create command, but in case you need to update a value its good to know where this file is located. A simple version of the plugin.xml file might look like this: xml <plugin> <name>Demonstration</name> <author>sebinside</author> <description>This is a simple plugin for demonstration purposes.</description> <api> <major>3</major> <minor>0</minor> </api> <version>0.3.0</version> <website>http://codeoverflow.org</website> <sourceRepo>https://github.com/codeoverflow-org/chatoverflow-plugins</sourceRepo> <bugtracker>https://github.com/codeoverflow-org/chatoverflow/issues</bugtracker> <license>EPL-2.0</license> </plugin> The properties called name, author, api versions and version are mandatory and the framework won't load the plugin, if one of these is missing. All others are optional information for the user. If you don't want to specify a value for those you can just omit them. The api tag contains the API-Version, which your plugin uses. These are evaluated in the loading process to ensure that your plugin works with the framework version from the user. You can get these numbers either from org.codeoverflow.chatoverflow.api.APIVersion in the api project or in the build.sbt also in the api project. Extend the Plugin with own logic \u00b6 The last step is the creation of the plugin class, which contains your own plugin logic. Again the create command has autogenerated a basic class extending org.codeoverflow.chatoverflow.api.plugin.PluginImpl in the language of your choice. Such a file might look like this in case of Scala: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 import org.codeoverflow.chatoverflow.api.plugin. { PluginImpl , PluginManager } class DemonstrationPlugin ( manager : PluginManager ) extends PluginImpl ( manager ) { // require more requirements as needed here private val sampleReq = require . input . sample ( \"sampleReq\" , \"Sample requirement\" , true ) // you can adjust the loop interval here // loopInterval = 1000; /** * The setup method is executed one, when the plugin is started. Do NOT define your requirements in here! */ override def setup () : Unit = { log ( \"Initialized Demonstration!\" ) } /** * The loop method is executed in loop with a specified interval until the shutdown method is called. * The loop method is NOT executed if a negative loop interval is set. */ override def loop () : Unit = { log ( \"Demonstration loop!\" ) } /** * The shutdown method should contain logic to close everything. */ override def shutdown () : Unit = { log ( \"Shutting down Demonstration!\" ) } } The framework searches for a class implementing org.codeoverflow.chatoverflow.api.plugin.Plugin when it tries to load a plugin. PluginImpl does this for you and also decreases some other boilerplate. Note that the whole plugin is only allowed to have exactly one class implementing Plugin otherwise the framework won't load your plugin. All methods in the generated class are pretty self explaining. The only thing we might need to talk about are Requirements : These are used to retrieve data from the outside world and returning information to it. Basically, you can require everything from a single parameter set by the user to full access to a users livestream chat. Thanks to PluginImpl a requirements object is already created, meaning you can start adding requirements right away. Here is a example: 1 2 private val twitchChatInput = require . input . twitchChat ( \"reqTwitch\" , \"A twitch channel\" , false ) private val nameToSayHelloTo = require . parameter . string ( \"reqHello\" , \"Your name\" , false ) This code requires read access to a twitch livestream chat and a parameter (\" a name to say hello to\" ). Note: You can obviously not specify which channel the user might choose - but you can be sure that you will get a working input. The framework takes care of that. After this, the last step is the start method. And it is as easy as you might think: Just add your own logic now, using the required parameters of your Requirement object. Here is a short example: This code will simply print out all messages from a twitch chat to the console. To access the chat, use the get() method on the requirement. 1 twitchChatInput . get (). registerMessageHandler ( msg => println ( msg )) Of course, you can also add own classes and infrastructure by now - the important steps are done, happy coding! One last note: If you are testing your plugin for the first time, a full reload might be needed. Use the custom task [Advanced] Full Reload and run ChatOverflow to do so. Afters this, you can configure the framework to start your plugin using the CLI !","title":"Writing a plugin"},{"location":"development/Writing-a-plugin/#create-a-new-plugin-project","text":"Use the Create Plugin run configuration or start the custom task sbt create directly. Enter the basic plugin information in the command prompt. This includes mandatory values like the name, author, version and base plugin folder (e.g. plugins-public ) and some optional values like a description, a website, a link to a source repo, a link to a bug tracker and a license. The command creates the folder structure of the new plugin and adds a basic build file. Here you can also add custom dependencies. In addition the command generates a basic plugin.xml containing all the passed information like name and description and a basic source code file generated in the language of your choice to get you started. Note that currently only Scala and Java are supported. Next, run the custom task sbt fetch to let the framework look for new plugins and update the plugin reference file plugins.sbt . If you're using IntelliJ, you can now reload the framework manually to register the plugin as a new custom project. You should also run sbt reload (Yes, both actions have different effects although they shouldn't).","title":"Create a new plugin project"},{"location":"development/Writing-a-plugin/#inspect-the-pluginxml-file","text":"All the metadata of the plugin like the name and the author of the plugin is saved in a xml file which is located at src/main/resources/plugin.xml in the plugin directory. This file gets autogenerated by the create command, but in case you need to update a value its good to know where this file is located. A simple version of the plugin.xml file might look like this: xml <plugin> <name>Demonstration</name> <author>sebinside</author> <description>This is a simple plugin for demonstration purposes.</description> <api> <major>3</major> <minor>0</minor> </api> <version>0.3.0</version> <website>http://codeoverflow.org</website> <sourceRepo>https://github.com/codeoverflow-org/chatoverflow-plugins</sourceRepo> <bugtracker>https://github.com/codeoverflow-org/chatoverflow/issues</bugtracker> <license>EPL-2.0</license> </plugin> The properties called name, author, api versions and version are mandatory and the framework won't load the plugin, if one of these is missing. All others are optional information for the user. If you don't want to specify a value for those you can just omit them. The api tag contains the API-Version, which your plugin uses. These are evaluated in the loading process to ensure that your plugin works with the framework version from the user. You can get these numbers either from org.codeoverflow.chatoverflow.api.APIVersion in the api project or in the build.sbt also in the api project.","title":"Inspect the plugin.xml file"},{"location":"development/Writing-a-plugin/#extend-the-plugin-with-own-logic","text":"The last step is the creation of the plugin class, which contains your own plugin logic. Again the create command has autogenerated a basic class extending org.codeoverflow.chatoverflow.api.plugin.PluginImpl in the language of your choice. Such a file might look like this in case of Scala: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 import org.codeoverflow.chatoverflow.api.plugin. { PluginImpl , PluginManager } class DemonstrationPlugin ( manager : PluginManager ) extends PluginImpl ( manager ) { // require more requirements as needed here private val sampleReq = require . input . sample ( \"sampleReq\" , \"Sample requirement\" , true ) // you can adjust the loop interval here // loopInterval = 1000; /** * The setup method is executed one, when the plugin is started. Do NOT define your requirements in here! */ override def setup () : Unit = { log ( \"Initialized Demonstration!\" ) } /** * The loop method is executed in loop with a specified interval until the shutdown method is called. * The loop method is NOT executed if a negative loop interval is set. */ override def loop () : Unit = { log ( \"Demonstration loop!\" ) } /** * The shutdown method should contain logic to close everything. */ override def shutdown () : Unit = { log ( \"Shutting down Demonstration!\" ) } } The framework searches for a class implementing org.codeoverflow.chatoverflow.api.plugin.Plugin when it tries to load a plugin. PluginImpl does this for you and also decreases some other boilerplate. Note that the whole plugin is only allowed to have exactly one class implementing Plugin otherwise the framework won't load your plugin. All methods in the generated class are pretty self explaining. The only thing we might need to talk about are Requirements : These are used to retrieve data from the outside world and returning information to it. Basically, you can require everything from a single parameter set by the user to full access to a users livestream chat. Thanks to PluginImpl a requirements object is already created, meaning you can start adding requirements right away. Here is a example: 1 2 private val twitchChatInput = require . input . twitchChat ( \"reqTwitch\" , \"A twitch channel\" , false ) private val nameToSayHelloTo = require . parameter . string ( \"reqHello\" , \"Your name\" , false ) This code requires read access to a twitch livestream chat and a parameter (\" a name to say hello to\" ). Note: You can obviously not specify which channel the user might choose - but you can be sure that you will get a working input. The framework takes care of that. After this, the last step is the start method. And it is as easy as you might think: Just add your own logic now, using the required parameters of your Requirement object. Here is a short example: This code will simply print out all messages from a twitch chat to the console. To access the chat, use the get() method on the requirement. 1 twitchChatInput . get (). registerMessageHandler ( msg => println ( msg )) Of course, you can also add own classes and infrastructure by now - the important steps are done, happy coding! One last note: If you are testing your plugin for the first time, a full reload might be needed. Use the custom task [Advanced] Full Reload and run ChatOverflow to do so. Afters this, you can configure the framework to start your plugin using the CLI !","title":"Extend the Plugin with own logic"},{"location":"services/Discord/","text":"The discord service allows you to connect to a discord text channel to get a list of recent messages, react on new, edited or deleted messages as well as reactions. You can also send messages, files or even fancy embeds . Quick note: \u00b6 It's clever to use discord in the developer mode, so that you can easily copy the id of a server/channel/user. To activate the developer mode go to User Settings > Appearance > Advanced Credentials \u00b6 authToken (required) \u00b6 The authentication token for accessing the discord api with a bot. First of all you need to register a new application on the discord developer portal . Then head over to the bot page and add a bot: Now you can retrieve the authentication token, click on copy and add it as a credentials value using the GUI. The only thing left to do is adding the bot to your server. Go to OAuth2 and create a link to login with bot scope: If you add the following permissions the bot is allowed to do any action chatoverflow supports: Now you only need to copy the link, follow it, login and add the bot! Plugin development with Discord Chat Input \u00b6 Have a look at this simple example plugin that uses an event handler to log all messages and displays the amount of messages every 5 seconds. It also logs if messages are edited, deleted and reactions are added. For more information have a look at the javadoc . 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 import java.util.function.Consumer ; import java.util.List ; import org.codeoverflow.chatoverflow.api.plugin.configuration.Requirement ; import org.codeoverflow.chatoverflow.api.io.input.chat.DiscordChatInput ; import org.codeoverflow.chatoverflow.api.plugin.PluginImpl ; import org.codeoverflow.chatoverflow.api.plugin.PluginManager ; import org.codeoverflow.chatoverflow.api.io.event.chat.discord.DiscordChatMessageReceiveEvent ; import org.codeoverflow.chatoverflow.api.io.event.chat.discord.DiscordChatMessageEditEvent ; import org.codeoverflow.chatoverflow.api.io.event.chat.discord.DiscordChatMessageDeleteEvent ; import org.codeoverflow.chatoverflow.api.io.event.chat.discord.DiscordReactionAddEvent ; import org.codeoverflow.chatoverflow.api.io.event.chat.discord.DiscordReaction ; import org.codeoverflow.chatoverflow.api.io.dto.chat.discord.DiscordChatMessage ; public class TestPlugin extends PluginImpl { //require a new discord chat input private Requirement < DiscordChatInput > discordIn = require . input . discordChat ( \"discordChat\" , \"The discord chat\" , false ); public TestPlugin ( PluginManager pluginManager ) { super ( pluginManager ); //Set the loop to repeat every 5 seconds (default 1 second) loopInterval = 5000 ; } @Override public void setup () { //set the channel for which we want to get the messages discordIn . get (). setChannel ( \"285809306790789120\" ); log ( \"Connected to channel with id 285809306790789120\" ); //register the event handlers discordIn . get (). registerChatMessageReceiveEventHandler ( new MessageHandler ()); discordIn . get (). registerChatMessageEditEventHandler ( new MessageEditHandler ()); discordIn . get (). registerChatMessageDeleteEventHandler ( new MessageDeleteHandler ()); discordIn . get (). registerReactionAddEventHandler ( new ReactionHandler ()); } @Override public void loop () { //get the recent messages List < DiscordChatMessage > messages = discordIn . get (). getLastMessages ( getLoopInterval ()); //calculate rate of messages per second double rate = messages . size () / ( loopInterval / 1000.0 ); log ( \"Users are chatting at a rate of \" + rate + \" messages per second\" ); } @Override public void shutdown () { log ( \"Shutdown!\" ); } private class MessageHandler implements Consumer < DiscordChatMessageReceiveEvent > { @Override public void accept ( DiscordChatMessageReceiveEvent event ) { DiscordChatMessage message = event . getMessage (); //log the message log ( \"[Discord]\" + message . toString ()); } } private class MessageEditHandler implements Consumer < DiscordChatMessageEditEvent > { @Override public void accept ( DiscordChatMessageEditEvent event ) { DiscordChatMessage message = event . getMessage (); DiscordChatMessage oldMessage = event . getOldMessage (); //log the old and the new message log ( \"[Discord] Message '\" + message . toString () + \"' updated to '\" + oldMessage . toString () + \"'\" ); } } private class MessageDeleteHandler implements Consumer < DiscordChatMessageDeleteEvent > { @Override public void accept ( DiscordChatMessageDeleteEvent event ) { DiscordChatMessage message = event . getMessage (); //log the deleted message log ( \"[Discord] Deleted message: '\" + message . toString () + \"'\" ); } } private class ReactionHandler implements Consumer < DiscordReactionAddEvent > { @Override public void accept ( DiscordReactionAddEvent event ) { DiscordReaction reaction = event . getReaction (); DiscordChatMessage message = event . getMessage (); //log the reaction log ( \"[Discord] Reaction \" + reaction . getImageUrl () + \" added to message '\" + message . toString ( + \"'\" ); } } } Plugin development with Discord Chat Output \u00b6 Have a look at this simple example plugin that posts the current time to the chat every minute. For more information have a look at the javadoc . 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 import java.util.function.Consumer ; import java.util.List ; import java.time.LocalTime ; import java.time.OffsetDateTime ; import java.time.format.DateTimeFormatter ; import org.codeoverflow.chatoverflow.api.plugin.configuration.Requirement ; import org.codeoverflow.chatoverflow.api.io.output.chat.DiscordChatOutput ; import org.codeoverflow.chatoverflow.api.io.dto.chat.discord.DiscordEmbed ; import org.codeoverflow.chatoverflow.api.plugin.PluginImpl ; import org.codeoverflow.chatoverflow.api.plugin.PluginManager ; public class TestPlugin extends PluginImpl { //require a new discord chat output private Requirement < DiscordChatOutput > discordOut = require . output . discordChat ( \"discordChat\" , \"The discord chat\" , false ); public TestPlugin ( PluginManager pluginManager ) { super ( pluginManager ); //Set the loop to repeat every 5 minutes (default 1 second) loopInterval = 5 * 60 * 1000 ; } @Override public void setup () { //set the channel to which we want send the messages discordOut . get (). setChannel ( \"285809306790789120\" ); log ( \"Connected to channel with id 285809306790789120\" ); //Send a message to the channel discordOut . get (). sendChatMessage ( \"Hello! \ud83d\udc4b\" ); //Send a file form chatoverflows data folder to the channel discordOut . get (). sendFile ( \"test_file.png\" ) } @Override public void loop () { String timeMessage = \"Es ist \" + LocalTime . now (). format ( DateTimeFormatter . ISO_LOCAL_TIME ) + \" Uhr!\" ; log ( timeMessage ); DiscordEmbed embed = DiscordEmbed . Builder () . withColor ( \"#FF7A04\" ) . withTitle ( timeMessage ) . withAuthor ( \"codeoverflow.org\" , \"http://codeoverflow.org\" , \"https://avatars3.githubusercontent.com/u/34384464?s=200&v=4\" ) . withTimestamp ( OffsetDateTime . now ()) . build (); //Output the embed to the discord chat discordOut . get (). sendChatMessage ( embed ); } @Override public void shutdown () { log ( \"Shutdown!\" ); } }","title":"Discord"},{"location":"services/Discord/#quick-note","text":"It's clever to use discord in the developer mode, so that you can easily copy the id of a server/channel/user. To activate the developer mode go to User Settings > Appearance > Advanced","title":"Quick note:"},{"location":"services/Discord/#credentials","text":"","title":"Credentials"},{"location":"services/Discord/#authtoken-required","text":"The authentication token for accessing the discord api with a bot. First of all you need to register a new application on the discord developer portal . Then head over to the bot page and add a bot: Now you can retrieve the authentication token, click on copy and add it as a credentials value using the GUI. The only thing left to do is adding the bot to your server. Go to OAuth2 and create a link to login with bot scope: If you add the following permissions the bot is allowed to do any action chatoverflow supports: Now you only need to copy the link, follow it, login and add the bot!","title":"authToken (required)"},{"location":"services/Discord/#plugin-development-with-discord-chat-input","text":"Have a look at this simple example plugin that uses an event handler to log all messages and displays the amount of messages every 5 seconds. It also logs if messages are edited, deleted and reactions are added. For more information have a look at the javadoc . 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 import java.util.function.Consumer ; import java.util.List ; import org.codeoverflow.chatoverflow.api.plugin.configuration.Requirement ; import org.codeoverflow.chatoverflow.api.io.input.chat.DiscordChatInput ; import org.codeoverflow.chatoverflow.api.plugin.PluginImpl ; import org.codeoverflow.chatoverflow.api.plugin.PluginManager ; import org.codeoverflow.chatoverflow.api.io.event.chat.discord.DiscordChatMessageReceiveEvent ; import org.codeoverflow.chatoverflow.api.io.event.chat.discord.DiscordChatMessageEditEvent ; import org.codeoverflow.chatoverflow.api.io.event.chat.discord.DiscordChatMessageDeleteEvent ; import org.codeoverflow.chatoverflow.api.io.event.chat.discord.DiscordReactionAddEvent ; import org.codeoverflow.chatoverflow.api.io.event.chat.discord.DiscordReaction ; import org.codeoverflow.chatoverflow.api.io.dto.chat.discord.DiscordChatMessage ; public class TestPlugin extends PluginImpl { //require a new discord chat input private Requirement < DiscordChatInput > discordIn = require . input . discordChat ( \"discordChat\" , \"The discord chat\" , false ); public TestPlugin ( PluginManager pluginManager ) { super ( pluginManager ); //Set the loop to repeat every 5 seconds (default 1 second) loopInterval = 5000 ; } @Override public void setup () { //set the channel for which we want to get the messages discordIn . get (). setChannel ( \"285809306790789120\" ); log ( \"Connected to channel with id 285809306790789120\" ); //register the event handlers discordIn . get (). registerChatMessageReceiveEventHandler ( new MessageHandler ()); discordIn . get (). registerChatMessageEditEventHandler ( new MessageEditHandler ()); discordIn . get (). registerChatMessageDeleteEventHandler ( new MessageDeleteHandler ()); discordIn . get (). registerReactionAddEventHandler ( new ReactionHandler ()); } @Override public void loop () { //get the recent messages List < DiscordChatMessage > messages = discordIn . get (). getLastMessages ( getLoopInterval ()); //calculate rate of messages per second double rate = messages . size () / ( loopInterval / 1000.0 ); log ( \"Users are chatting at a rate of \" + rate + \" messages per second\" ); } @Override public void shutdown () { log ( \"Shutdown!\" ); } private class MessageHandler implements Consumer < DiscordChatMessageReceiveEvent > { @Override public void accept ( DiscordChatMessageReceiveEvent event ) { DiscordChatMessage message = event . getMessage (); //log the message log ( \"[Discord]\" + message . toString ()); } } private class MessageEditHandler implements Consumer < DiscordChatMessageEditEvent > { @Override public void accept ( DiscordChatMessageEditEvent event ) { DiscordChatMessage message = event . getMessage (); DiscordChatMessage oldMessage = event . getOldMessage (); //log the old and the new message log ( \"[Discord] Message '\" + message . toString () + \"' updated to '\" + oldMessage . toString () + \"'\" ); } } private class MessageDeleteHandler implements Consumer < DiscordChatMessageDeleteEvent > { @Override public void accept ( DiscordChatMessageDeleteEvent event ) { DiscordChatMessage message = event . getMessage (); //log the deleted message log ( \"[Discord] Deleted message: '\" + message . toString () + \"'\" ); } } private class ReactionHandler implements Consumer < DiscordReactionAddEvent > { @Override public void accept ( DiscordReactionAddEvent event ) { DiscordReaction reaction = event . getReaction (); DiscordChatMessage message = event . getMessage (); //log the reaction log ( \"[Discord] Reaction \" + reaction . getImageUrl () + \" added to message '\" + message . toString ( + \"'\" ); } } }","title":"Plugin development with Discord Chat Input"},{"location":"services/Discord/#plugin-development-with-discord-chat-output","text":"Have a look at this simple example plugin that posts the current time to the chat every minute. For more information have a look at the javadoc . 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 import java.util.function.Consumer ; import java.util.List ; import java.time.LocalTime ; import java.time.OffsetDateTime ; import java.time.format.DateTimeFormatter ; import org.codeoverflow.chatoverflow.api.plugin.configuration.Requirement ; import org.codeoverflow.chatoverflow.api.io.output.chat.DiscordChatOutput ; import org.codeoverflow.chatoverflow.api.io.dto.chat.discord.DiscordEmbed ; import org.codeoverflow.chatoverflow.api.plugin.PluginImpl ; import org.codeoverflow.chatoverflow.api.plugin.PluginManager ; public class TestPlugin extends PluginImpl { //require a new discord chat output private Requirement < DiscordChatOutput > discordOut = require . output . discordChat ( \"discordChat\" , \"The discord chat\" , false ); public TestPlugin ( PluginManager pluginManager ) { super ( pluginManager ); //Set the loop to repeat every 5 minutes (default 1 second) loopInterval = 5 * 60 * 1000 ; } @Override public void setup () { //set the channel to which we want send the messages discordOut . get (). setChannel ( \"285809306790789120\" ); log ( \"Connected to channel with id 285809306790789120\" ); //Send a message to the channel discordOut . get (). sendChatMessage ( \"Hello! \ud83d\udc4b\" ); //Send a file form chatoverflows data folder to the channel discordOut . get (). sendFile ( \"test_file.png\" ) } @Override public void loop () { String timeMessage = \"Es ist \" + LocalTime . now (). format ( DateTimeFormatter . ISO_LOCAL_TIME ) + \" Uhr!\" ; log ( timeMessage ); DiscordEmbed embed = DiscordEmbed . Builder () . withColor ( \"#FF7A04\" ) . withTitle ( timeMessage ) . withAuthor ( \"codeoverflow.org\" , \"http://codeoverflow.org\" , \"https://avatars3.githubusercontent.com/u/34384464?s=200&v=4\" ) . withTimestamp ( OffsetDateTime . now ()) . build (); //Output the embed to the discord chat discordOut . get (). sendChatMessage ( embed ); } @Override public void shutdown () { log ( \"Shutdown!\" ); } }","title":"Plugin development with Discord Chat Output"},{"location":"services/File/","text":"The file service allows you to perform file operations that would otherwise be prohibited by the sandbox security manager. It features easy ways to read, write or delete files and for managing subdirectories. To keep you safe from malicious plugins all file operations are restricted to the data folder. Credentials \u00b6 The file service doesn't require any credentials. Plugin development with File Input \u00b6 Have a look at this simple example plugin that loads files from the data folder: For more information have a look at the javadoc . 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 import java.util.Optional ; import java.awt.image.BufferedImage ; import org.codeoverflow.chatoverflow.api.plugin.configuration.Requirement ; import org.codeoverflow.chatoverflow.api.io.input.FileInput ; import org.codeoverflow.chatoverflow.api.plugin.PluginImpl ; import org.codeoverflow.chatoverflow.api.plugin.PluginManager ; public class TestPlugin extends PluginImpl { //require a new file input private Requirement < FileInput > fsi = require . input . file ( \"fileInput\" , \"Read data from the file system\" , false ); public TestPlugin ( PluginManager pluginManager ) { super ( pluginManager ); } @Override public void setup () { //read text from the test.txt file in the data folder to a string: Optional < String > text = fsi . get (). getFile ( \"test.txt\" ); if ( text . isPresent ()) { log ( text . get ()); } else { log ( \"Couldn't read test.txt\" ); } //read the content of a file into a byte array Optional < byte []> raw = fsi . get (). getBinaryFile ( \"test.bin\" ); if ( raw . isPresent ()) { byte [] array = raw . get (); //... } else { log ( \"Couldn't read test.bin\" ); } //load an image Optional < BufferedImage > img = fsi . get (). getImage ( \"test.png\" ); if ( img . isPresent ()) { BufferedImage image = img . get (); //... } else { log ( \"Couldn't load test.png\" ); } } @Override public void loop () {} @Override public void shutdown () { log ( \"Shutdown!\" ); } } Plugin development with File Output \u00b6 Have a look at this simple example plugin that saves files and creates or deletes directories in the data folder. For more information have a look at the javadoc . 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 import java.awt.image.BufferedImage ; import java.awt.Graphics2D ; import java.awt.Color ; import org.codeoverflow.chatoverflow.api.plugin.configuration.Requirement ; import org.codeoverflow.chatoverflow.api.io.output.FileOutput ; import org.codeoverflow.chatoverflow.api.plugin.PluginImpl ; import org.codeoverflow.chatoverflow.api.plugin.PluginManager ; public class TestPlugin extends PluginImpl { //require a new file output private Requirement < FileOutput > fso = require . output . serial ( \"fileOutput\" , \"Interact with the file system\" , false ); public TestPlugin ( PluginManager pluginManager ) { super ( pluginManager ); } @Override public void setup () { //create a folder called \"test\" inside the data folder fso . createDirectory ( \"test\" ); //create a sample file with a stupid swabian tongue twister fso . saveFile ( \"Schellet's net an sellrer Schelle, selle Schelle schellet net.\\n\" + \"Schellet's an seller Schelle, selle Schelle schellet!\" , \"test/tounge-twister.txt\" ); //save some binary to a file byte [] binary = { 0x48 , 0x65 , 0x6C , 0x6C , 0x6F , 0x20 , 0x57 , 0x6F , 0x72 , 0x6C , 0x64 , 0x21 }; fso . saveBinaryFile ( binary , \"test.bin\" ); //save an image BufferedImage img = new BufferedImage ( 256 , 256 , BufferedImage . TYPE_INT_ARGB ); Graphics2D graphics = img . createGraphics (); graphics . setPaint ( new Color ( 255 , 121 , 1 )); graphics . fillRect ( 0 , 0 , img . getWidth (), img . getHeight () ); fso . saveImage ( img , \"test.png\" ); //check if a file exists boolean exists = fso . exists ( \"test.txt\" ); //delete a file if ( exists ) fso . delete ( \"test.txt\" ); } @Override public void loop () {} @Override public void shutdown () { log ( \"Shutdown!\" ); } }","title":"File"},{"location":"services/File/#credentials","text":"The file service doesn't require any credentials.","title":"Credentials"},{"location":"services/File/#plugin-development-with-file-input","text":"Have a look at this simple example plugin that loads files from the data folder: For more information have a look at the javadoc . 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 import java.util.Optional ; import java.awt.image.BufferedImage ; import org.codeoverflow.chatoverflow.api.plugin.configuration.Requirement ; import org.codeoverflow.chatoverflow.api.io.input.FileInput ; import org.codeoverflow.chatoverflow.api.plugin.PluginImpl ; import org.codeoverflow.chatoverflow.api.plugin.PluginManager ; public class TestPlugin extends PluginImpl { //require a new file input private Requirement < FileInput > fsi = require . input . file ( \"fileInput\" , \"Read data from the file system\" , false ); public TestPlugin ( PluginManager pluginManager ) { super ( pluginManager ); } @Override public void setup () { //read text from the test.txt file in the data folder to a string: Optional < String > text = fsi . get (). getFile ( \"test.txt\" ); if ( text . isPresent ()) { log ( text . get ()); } else { log ( \"Couldn't read test.txt\" ); } //read the content of a file into a byte array Optional < byte []> raw = fsi . get (). getBinaryFile ( \"test.bin\" ); if ( raw . isPresent ()) { byte [] array = raw . get (); //... } else { log ( \"Couldn't read test.bin\" ); } //load an image Optional < BufferedImage > img = fsi . get (). getImage ( \"test.png\" ); if ( img . isPresent ()) { BufferedImage image = img . get (); //... } else { log ( \"Couldn't load test.png\" ); } } @Override public void loop () {} @Override public void shutdown () { log ( \"Shutdown!\" ); } }","title":"Plugin development with File Input"},{"location":"services/File/#plugin-development-with-file-output","text":"Have a look at this simple example plugin that saves files and creates or deletes directories in the data folder. For more information have a look at the javadoc . 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 import java.awt.image.BufferedImage ; import java.awt.Graphics2D ; import java.awt.Color ; import org.codeoverflow.chatoverflow.api.plugin.configuration.Requirement ; import org.codeoverflow.chatoverflow.api.io.output.FileOutput ; import org.codeoverflow.chatoverflow.api.plugin.PluginImpl ; import org.codeoverflow.chatoverflow.api.plugin.PluginManager ; public class TestPlugin extends PluginImpl { //require a new file output private Requirement < FileOutput > fso = require . output . serial ( \"fileOutput\" , \"Interact with the file system\" , false ); public TestPlugin ( PluginManager pluginManager ) { super ( pluginManager ); } @Override public void setup () { //create a folder called \"test\" inside the data folder fso . createDirectory ( \"test\" ); //create a sample file with a stupid swabian tongue twister fso . saveFile ( \"Schellet's net an sellrer Schelle, selle Schelle schellet net.\\n\" + \"Schellet's an seller Schelle, selle Schelle schellet!\" , \"test/tounge-twister.txt\" ); //save some binary to a file byte [] binary = { 0x48 , 0x65 , 0x6C , 0x6C , 0x6F , 0x20 , 0x57 , 0x6F , 0x72 , 0x6C , 0x64 , 0x21 }; fso . saveBinaryFile ( binary , \"test.bin\" ); //save an image BufferedImage img = new BufferedImage ( 256 , 256 , BufferedImage . TYPE_INT_ARGB ); Graphics2D graphics = img . createGraphics (); graphics . setPaint ( new Color ( 255 , 121 , 1 )); graphics . fillRect ( 0 , 0 , img . getWidth (), img . getHeight () ); fso . saveImage ( img , \"test.png\" ); //check if a file exists boolean exists = fso . exists ( \"test.txt\" ); //delete a file if ( exists ) fso . delete ( \"test.txt\" ); } @Override public void loop () {} @Override public void shutdown () { log ( \"Shutdown!\" ); } }","title":"Plugin development with File Output"},{"location":"services/RCON/","text":"The RCON service can be used to execute commands on a game server using the Source RCON Protocol . Popular games that implement the RCON protocol are Minecraft, Factorio, Garrysmod and Counter-Strike: Global Offensive. But there are way more games that also have this functionality, Google will help you to find out if your game has it and how you can activate it. Credentials \u00b6 address (required) \u00b6 The IPv4 address or domain of your game server. password (required) \u00b6 The password for accessing your servers RCON socket. It is defined somewhere in your servers configuration (different for each game, google will help you). port (optional) \u00b6 The port on which the RCON socket runs. It is defined somewhere in your servers configuration (different for each game, google will help you). Plugin development with RCON Output \u00b6 Have a look at this simple plugin that says hello to all players on a minecraft server using rcon: For more information have a look at the javadoc . 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 import org.codeoverflow.chatoverflow.api.plugin.configuration.Requirement ; import org.codeoverflow.chatoverflow.api.io.input.RconOutput ; import org.codeoverflow.chatoverflow.api.plugin.PluginImpl ; import org.codeoverflow.chatoverflow.api.plugin.PluginManager ; public class TestPlugin extends PluginImpl { //require a new rcon output private Requirement < RconOutput > rcon = require . output . rcon ( \"rcon\" , \"Connect to a minecraft server using RCON\" , false ); public TestPlugin ( PluginManager pluginManager ) { super ( pluginManager ); } @Override public void setup () { //execute a command rcon . get (). sendCommand ( \"say Hello World!\" ); } @Override public void loop () {} @Override public void shutdown () { log ( \"Shutdown!\" ); } } Plugin development with RCON Input \u00b6 If you want to also get the response of a command have a look at this simple plugin: For more information have a look at the javadoc . 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 import org.codeoverflow.chatoverflow.api.plugin.configuration.Requirement ; import org.codeoverflow.chatoverflow.api.io.input.RconInput ; import org.codeoverflow.chatoverflow.api.plugin.PluginImpl ; import org.codeoverflow.chatoverflow.api.plugin.PluginManager ; public class TestPlugin extends PluginImpl { //require a new rcon input private Requirement < RconInput > rcon = require . input . rcon ( \"rcon\" , \"Connect to a minecraft server using RCON\" , false ); public TestPlugin ( PluginManager pluginManager ) { super ( pluginManager ); } @Override public void setup () { //execute a command and log the response String response = rcon . get (). getCommandOutput ( \"list\" ); log ( response ); } @Override public void loop () {} @Override public void shutdown () { log ( \"Shutdown!\" ); } }","title":"RCON"},{"location":"services/RCON/#credentials","text":"","title":"Credentials"},{"location":"services/RCON/#address-required","text":"The IPv4 address or domain of your game server.","title":"address (required)"},{"location":"services/RCON/#password-required","text":"The password for accessing your servers RCON socket. It is defined somewhere in your servers configuration (different for each game, google will help you).","title":"password (required)"},{"location":"services/RCON/#port-optional","text":"The port on which the RCON socket runs. It is defined somewhere in your servers configuration (different for each game, google will help you).","title":"port (optional)"},{"location":"services/RCON/#plugin-development-with-rcon-output","text":"Have a look at this simple plugin that says hello to all players on a minecraft server using rcon: For more information have a look at the javadoc . 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 import org.codeoverflow.chatoverflow.api.plugin.configuration.Requirement ; import org.codeoverflow.chatoverflow.api.io.input.RconOutput ; import org.codeoverflow.chatoverflow.api.plugin.PluginImpl ; import org.codeoverflow.chatoverflow.api.plugin.PluginManager ; public class TestPlugin extends PluginImpl { //require a new rcon output private Requirement < RconOutput > rcon = require . output . rcon ( \"rcon\" , \"Connect to a minecraft server using RCON\" , false ); public TestPlugin ( PluginManager pluginManager ) { super ( pluginManager ); } @Override public void setup () { //execute a command rcon . get (). sendCommand ( \"say Hello World!\" ); } @Override public void loop () {} @Override public void shutdown () { log ( \"Shutdown!\" ); } }","title":"Plugin development with RCON Output"},{"location":"services/RCON/#plugin-development-with-rcon-input","text":"If you want to also get the response of a command have a look at this simple plugin: For more information have a look at the javadoc . 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 import org.codeoverflow.chatoverflow.api.plugin.configuration.Requirement ; import org.codeoverflow.chatoverflow.api.io.input.RconInput ; import org.codeoverflow.chatoverflow.api.plugin.PluginImpl ; import org.codeoverflow.chatoverflow.api.plugin.PluginManager ; public class TestPlugin extends PluginImpl { //require a new rcon input private Requirement < RconInput > rcon = require . input . rcon ( \"rcon\" , \"Connect to a minecraft server using RCON\" , false ); public TestPlugin ( PluginManager pluginManager ) { super ( pluginManager ); } @Override public void setup () { //execute a command and log the response String response = rcon . get (). getCommandOutput ( \"list\" ); log ( response ); } @Override public void loop () {} @Override public void shutdown () { log ( \"Shutdown!\" ); } }","title":"Plugin development with RCON Input"},{"location":"services/Sample/","text":"The Sample service is just an example on how a connector should look like. And this wiki page is just an example how a wiki page for a connector should look like. First you have a short description. The image in the upper right corner can be done with the following html in the first line of the page: 1 < p >< img align = \"right\" width = \"128\" height = \"128\" src = \"/docs/img/services/sample-material-icon.png\" ></ p > The image should be uploaded to img/services . Credentials \u00b6 The sample service doesn't require any credentials. Otherwise this section should list all required credentials and show how to obtain them, see discord service . Plugin development with Sample Input \u00b6 Have a look at this simple sample plugin: For more information have a look at the javadoc . 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 import org.codeoverflow.chatoverflow.api.plugin.configuration.Requirement ; import org.codeoverflow.chatoverflow.api.io.input.SampleInput ; import org.codeoverflow.chatoverflow.api.plugin.PluginImpl ; import org.codeoverflow.chatoverflow.api.plugin.PluginManager ; public class TestPlugin extends PluginImpl { //require a new sample input private Requirement < SampleInput > sample = require . input . sample ( \"sample\" , \"Some description\" , false ); public TestPlugin ( PluginManager pluginManager ) { super ( pluginManager ); } @Override public void setup () { //some code that shows of the general usage of the service here //... } @Override public void loop () {} @Override public void shutdown () { log ( \"Shutdown!\" ); } }","title":"Sample"},{"location":"services/Sample/#credentials","text":"The sample service doesn't require any credentials. Otherwise this section should list all required credentials and show how to obtain them, see discord service .","title":"Credentials"},{"location":"services/Sample/#plugin-development-with-sample-input","text":"Have a look at this simple sample plugin: For more information have a look at the javadoc . 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 import org.codeoverflow.chatoverflow.api.plugin.configuration.Requirement ; import org.codeoverflow.chatoverflow.api.io.input.SampleInput ; import org.codeoverflow.chatoverflow.api.plugin.PluginImpl ; import org.codeoverflow.chatoverflow.api.plugin.PluginManager ; public class TestPlugin extends PluginImpl { //require a new sample input private Requirement < SampleInput > sample = require . input . sample ( \"sample\" , \"Some description\" , false ); public TestPlugin ( PluginManager pluginManager ) { super ( pluginManager ); } @Override public void setup () { //some code that shows of the general usage of the service here //... } @Override public void loop () {} @Override public void shutdown () { log ( \"Shutdown!\" ); } }","title":"Plugin development with Sample Input"},{"location":"services/Serial/","text":"The Serial service allows you to communicate with a device that is connected to your PC over a serial port. The most common example is exchanging data with an arduino over USB. Credentials \u00b6 port (required) \u00b6 The serial port you want to communicate with. Finding the right port is different on every operating system: Windows: 1. Open Device Manager, and expand the Ports (COM & LPT) list 2. Note the port name between the braces (e.g. COM3 ) Mac: 1. Open terminal and type: 1 ls /dev/* 2. Note the port number listed for /dev/tty.usbmodem* or /dev/tty.usbserial*. The port number is represented with * here. Linux: 1. Open terminal and type: 1 ls /dev/tty* 2. Note the port number listed for /dev/ttyUSB* or /dev/ttyACM* The port number is represented with * here baudRate (optional) \u00b6 If you want to use a custom baud rate to communicate with the device you can set it here. Default value is 9600 . Plugin development with Serial Input \u00b6 Have a look at this simple example plugin that prints incoming data to log: For more information have a look at the javadoc . 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 import java.util.function.Consumer ; import org.codeoverflow.chatoverflow.api.plugin.configuration.Requirement ; import org.codeoverflow.chatoverflow.api.io.input.SerialInput ; import org.codeoverflow.chatoverflow.api.io.event.serial.SerialDataAvailableEvent ; import org.codeoverflow.chatoverflow.api.plugin.PluginImpl ; import org.codeoverflow.chatoverflow.api.plugin.PluginManager ; public class TestPlugin extends PluginImpl { //require a new serial input private Requirement < SerialInput > serialIn = require . input . serial ( \"serialIn\" , \"An arduino connected to the serial port\" , false ); public TestPlugin ( PluginManager pluginManager ) { super ( pluginManager ); } @Override public void setup () { //register the message handler that reacts on incoming messages serialIn . get (). registerDataAvailableEventHandler ( new DataHandler ()); } @Override public void loop () {} @Override public void shutdown () { log ( \"Shutdown!\" ); } private class DataHandler implements Consumer < SerialDataAvailableEvent > { @Override public void accept ( SerialDataAvailableEvent event ) { //print the incoming string to the log log ( \"[Serial]\" + event . getAsString ()); } } } Plugin development with Serial Output \u00b6 Have a look at this simple example plugin that sends ping to the connected device For more information have a look at the javadoc . 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 import java.util.function.Consumer ; import java.util.List ; import java.time.LocalTime ; import java.time.format.DateTimeFormatter ; import org.codeoverflow.chatoverflow.api.plugin.configuration.Requirement ; import org.codeoverflow.chatoverflow.api.io.output.SerialOutput ; import org.codeoverflow.chatoverflow.api.plugin.PluginImpl ; import org.codeoverflow.chatoverflow.api.plugin.PluginManager ; public class TestPlugin extends PluginImpl { //require a new serial output private Requirement < SerialOutput > serialOut = require . output . serial ( \"serialOut\" , \"An arduino connected to the serial port\" , false ); public TestPlugin ( PluginManager pluginManager ) { super ( pluginManager ); //Set the loop to repeat every 30 seconds (default 1 second) loopInterval = 30 * 1000 ; } @Override public void setup () {} @Override public void loop () { //Send ping to serial port serialOut . getPrintStream (). println ( \"ping\" ); } @Override public void shutdown () { log ( \"Shutdown!\" ); } } Example arduino script \u00b6 A simple ping-pong example script for your arduino. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 String inputString = \"\" ; boolean stringComplete = false ; void setup () { Serial . begin ( 9600 ); } // the loop routine runs over and over again forever void loop () { while ( Serial . available ()) { char inChar = ( char ) Serial . read (); inputString += inChar ; if ( inChar == '\\n' ) { stringComplete = true ; } } if ( stringComplete ) { Serial . println ( \"pong\" ); stringComplete = false ; } delay ( 1 ); // delay in between reads for stability }","title":"Serial Port (Arduino"},{"location":"services/Serial/#credentials","text":"","title":"Credentials"},{"location":"services/Serial/#port-required","text":"The serial port you want to communicate with. Finding the right port is different on every operating system: Windows: 1. Open Device Manager, and expand the Ports (COM & LPT) list 2. Note the port name between the braces (e.g. COM3 ) Mac: 1. Open terminal and type: 1 ls /dev/* 2. Note the port number listed for /dev/tty.usbmodem* or /dev/tty.usbserial*. The port number is represented with * here. Linux: 1. Open terminal and type: 1 ls /dev/tty* 2. Note the port number listed for /dev/ttyUSB* or /dev/ttyACM* The port number is represented with * here","title":"port (required)"},{"location":"services/Serial/#baudrate-optional","text":"If you want to use a custom baud rate to communicate with the device you can set it here. Default value is 9600 .","title":"baudRate (optional)"},{"location":"services/Serial/#plugin-development-with-serial-input","text":"Have a look at this simple example plugin that prints incoming data to log: For more information have a look at the javadoc . 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 import java.util.function.Consumer ; import org.codeoverflow.chatoverflow.api.plugin.configuration.Requirement ; import org.codeoverflow.chatoverflow.api.io.input.SerialInput ; import org.codeoverflow.chatoverflow.api.io.event.serial.SerialDataAvailableEvent ; import org.codeoverflow.chatoverflow.api.plugin.PluginImpl ; import org.codeoverflow.chatoverflow.api.plugin.PluginManager ; public class TestPlugin extends PluginImpl { //require a new serial input private Requirement < SerialInput > serialIn = require . input . serial ( \"serialIn\" , \"An arduino connected to the serial port\" , false ); public TestPlugin ( PluginManager pluginManager ) { super ( pluginManager ); } @Override public void setup () { //register the message handler that reacts on incoming messages serialIn . get (). registerDataAvailableEventHandler ( new DataHandler ()); } @Override public void loop () {} @Override public void shutdown () { log ( \"Shutdown!\" ); } private class DataHandler implements Consumer < SerialDataAvailableEvent > { @Override public void accept ( SerialDataAvailableEvent event ) { //print the incoming string to the log log ( \"[Serial]\" + event . getAsString ()); } } }","title":"Plugin development with Serial Input"},{"location":"services/Serial/#plugin-development-with-serial-output","text":"Have a look at this simple example plugin that sends ping to the connected device For more information have a look at the javadoc . 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 import java.util.function.Consumer ; import java.util.List ; import java.time.LocalTime ; import java.time.format.DateTimeFormatter ; import org.codeoverflow.chatoverflow.api.plugin.configuration.Requirement ; import org.codeoverflow.chatoverflow.api.io.output.SerialOutput ; import org.codeoverflow.chatoverflow.api.plugin.PluginImpl ; import org.codeoverflow.chatoverflow.api.plugin.PluginManager ; public class TestPlugin extends PluginImpl { //require a new serial output private Requirement < SerialOutput > serialOut = require . output . serial ( \"serialOut\" , \"An arduino connected to the serial port\" , false ); public TestPlugin ( PluginManager pluginManager ) { super ( pluginManager ); //Set the loop to repeat every 30 seconds (default 1 second) loopInterval = 30 * 1000 ; } @Override public void setup () {} @Override public void loop () { //Send ping to serial port serialOut . getPrintStream (). println ( \"ping\" ); } @Override public void shutdown () { log ( \"Shutdown!\" ); } }","title":"Plugin development with Serial Output"},{"location":"services/Serial/#example-arduino-script","text":"A simple ping-pong example script for your arduino. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 String inputString = \"\" ; boolean stringComplete = false ; void setup () { Serial . begin ( 9600 ); } // the loop routine runs over and over again forever void loop () { while ( Serial . available ()) { char inChar = ( char ) Serial . read (); inputString += inChar ; if ( inChar == '\\n' ) { stringComplete = true ; } } if ( stringComplete ) { Serial . println ( \"pong\" ); stringComplete = false ; } delay ( 1 ); // delay in between reads for stability }","title":"Example arduino script"},{"location":"services/StreamElements/","text":"By using the StreamElements service you can react on donations, subscriptions and follows in your stream. Credentials \u00b6 jwt-token (required) \u00b6 The key used for authentication with the StreamElements api. You find your JWT at https://streamelements.com/dashboard/account/channels. Click on Show Secrets , copy the entire key labeled JWT Token , add it as a credentials value with the key jwt-token and you're done! Plugin development with the StreamElements Event Input \u00b6 This simple example plugin logs all Subscriptions: For other event types just use the appropriate register method of the input. The StreamElements event input is capable of all the following events: Follows Subscriptions Donations Cheers Raids Hosts For more information have a look at the javadoc . 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 import java.util.function.Consumer ; import org.codeoverflow.chatoverflow.api.plugin.configuration.Requirement ; import org.codeoverflow.chatoverflow.api.io.input.event.StreamElementsEventInput ; import org.codeoverflow.chatoverflow.api.plugin.PluginImpl ; import org.codeoverflow.chatoverflow.api.plugin.PluginManager ; import org.codeoverflow.chatoverflow.api.io.event.stream.streamelements.StreamElementsSubscriptionEvent ; import org.codeoverflow.chatoverflow.api.io.dto.stat.stream.streamelements.StreamElementsSubscription ; public class TestPlugin extends PluginImpl { // require a StreamElements event input private Requirement < StreamElementsEventInput > streamElementsIn = require . input . streamElements ( \"streamElements\" , \"Access to the StreamElements API\" , false ); public TestPlugin ( PluginManager pluginManager ) { super ( pluginManager ); } @Override public void setup () { // register the subscription event handler that triggers if someone subscribes streamElementsIn . get (). registerSubscriptionEventHandler ( new SubHandler ()); } @Override public void loop () { } @Override public void shutdown () { log ( \"Shutdown!\" ); } private class SubHandler implements Consumer < StreamElementsSubscriptionEvent > { @Override public void accept ( StreamElementsSubscriptionEvent event ) { StreamElementsSubscriptionEvent sub = event . getInfo (); // Print information about the event to the log log ( sub . getSubscriber (). getDisplayName () + \" subscribed. Resub streak: \" + sub . getResub ()); } } }","title":"StreamElements"},{"location":"services/StreamElements/#credentials","text":"","title":"Credentials"},{"location":"services/StreamElements/#jwt-token-required","text":"The key used for authentication with the StreamElements api. You find your JWT at https://streamelements.com/dashboard/account/channels. Click on Show Secrets , copy the entire key labeled JWT Token , add it as a credentials value with the key jwt-token and you're done!","title":"jwt-token (required)"},{"location":"services/StreamElements/#plugin-development-with-the-streamelements-event-input","text":"This simple example plugin logs all Subscriptions: For other event types just use the appropriate register method of the input. The StreamElements event input is capable of all the following events: Follows Subscriptions Donations Cheers Raids Hosts For more information have a look at the javadoc . 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 import java.util.function.Consumer ; import org.codeoverflow.chatoverflow.api.plugin.configuration.Requirement ; import org.codeoverflow.chatoverflow.api.io.input.event.StreamElementsEventInput ; import org.codeoverflow.chatoverflow.api.plugin.PluginImpl ; import org.codeoverflow.chatoverflow.api.plugin.PluginManager ; import org.codeoverflow.chatoverflow.api.io.event.stream.streamelements.StreamElementsSubscriptionEvent ; import org.codeoverflow.chatoverflow.api.io.dto.stat.stream.streamelements.StreamElementsSubscription ; public class TestPlugin extends PluginImpl { // require a StreamElements event input private Requirement < StreamElementsEventInput > streamElementsIn = require . input . streamElements ( \"streamElements\" , \"Access to the StreamElements API\" , false ); public TestPlugin ( PluginManager pluginManager ) { super ( pluginManager ); } @Override public void setup () { // register the subscription event handler that triggers if someone subscribes streamElementsIn . get (). registerSubscriptionEventHandler ( new SubHandler ()); } @Override public void loop () { } @Override public void shutdown () { log ( \"Shutdown!\" ); } private class SubHandler implements Consumer < StreamElementsSubscriptionEvent > { @Override public void accept ( StreamElementsSubscriptionEvent event ) { StreamElementsSubscriptionEvent sub = event . getInfo (); // Print information about the event to the log log ( sub . getSubscriber (). getDisplayName () + \" subscribed. Resub streak: \" + sub . getResub ()); } } }","title":"Plugin development with the StreamElements Event Input"},{"location":"services/TipeeeStream/","text":"By using the TipeeeStream service you can react on donations, subscriptions and follows in your stream. Just listen to the events provided by the TipeeeStream event input. Credentials \u00b6 username (required) \u00b6 Guess what: Your TipeeeStream username \ud83d\ude09. Just add a new credentials value with username as key and your username as value. A guide can be found here . apiKey (required) \u00b6 The key used for authentication to the TipeeeStream api. You find your key on https://www.tipeeestream.com/dashboard/api-key. Click on Show , copy the entire key, add it as a credentials value with the key apikey and you're done! Plugin development with TipeeeStream Event Input \u00b6 This simple example plugin logs all Subscriptions: For more information have a look at the javadoc , the TipeeeStream event input is capable of all the following events: Follows Subscriptions Donations Cheers Raids Hosts 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 import java.util.function.Consumer ; import org.codeoverflow.chatoverflow.api.plugin.configuration.Requirement ; import org.codeoverflow.chatoverflow.api.io.input.event.TipeeestreamEventInput ; import org.codeoverflow.chatoverflow.api.plugin.PluginImpl ; import org.codeoverflow.chatoverflow.api.plugin.PluginManager ; import org.codeoverflow.chatoverflow.api.io.event.stream.tipeeestream.TipeeestreamSubscriptionEvent ; import org.codeoverflow.chatoverflow.api.io.dto.stat.stream.tipeeestream.TipeeestreamSubscription ; public class TestPlugin extends PluginImpl { // require a new TipeeeStream event input private Requirement < TipeeestreamEventInput > tipeeeIn = require . input . tipeeeStream ( \"tipeeestream\" , \"Connection to the TipeeeStream api\" , false ); public TestPlugin ( PluginManager pluginManager ) { super ( pluginManager ); } @Override public void setup () { // register the subscription event handler that reacts on subscriptions tipeeeIn . get (). registerSubscriptionEventHandler ( new SubHandler ()); } @Override public void loop () { } @Override public void shutdown () { log ( \"Shutdown!\" ); } private class SubHandler implements Consumer < TipeeestreamSubscriptionEvent > { @Override public void accept ( TipeeestreamSubscriptionEvent event ) { TipeeestreamSubscription sub = event . getInfo (); // print information about the event to the log log ( sub . getSubscriber (). getDisplayName () + \" subscribed. Resub streak: \" + sub . getResub ()); } } }","title":"TipeeeStream"},{"location":"services/TipeeeStream/#credentials","text":"","title":"Credentials"},{"location":"services/TipeeeStream/#username-required","text":"Guess what: Your TipeeeStream username \ud83d\ude09. Just add a new credentials value with username as key and your username as value. A guide can be found here .","title":"username (required)"},{"location":"services/TipeeeStream/#apikey-required","text":"The key used for authentication to the TipeeeStream api. You find your key on https://www.tipeeestream.com/dashboard/api-key. Click on Show , copy the entire key, add it as a credentials value with the key apikey and you're done!","title":"apiKey (required)"},{"location":"services/TipeeeStream/#plugin-development-with-tipeeestream-event-input","text":"This simple example plugin logs all Subscriptions: For more information have a look at the javadoc , the TipeeeStream event input is capable of all the following events: Follows Subscriptions Donations Cheers Raids Hosts 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 import java.util.function.Consumer ; import org.codeoverflow.chatoverflow.api.plugin.configuration.Requirement ; import org.codeoverflow.chatoverflow.api.io.input.event.TipeeestreamEventInput ; import org.codeoverflow.chatoverflow.api.plugin.PluginImpl ; import org.codeoverflow.chatoverflow.api.plugin.PluginManager ; import org.codeoverflow.chatoverflow.api.io.event.stream.tipeeestream.TipeeestreamSubscriptionEvent ; import org.codeoverflow.chatoverflow.api.io.dto.stat.stream.tipeeestream.TipeeestreamSubscription ; public class TestPlugin extends PluginImpl { // require a new TipeeeStream event input private Requirement < TipeeestreamEventInput > tipeeeIn = require . input . tipeeeStream ( \"tipeeestream\" , \"Connection to the TipeeeStream api\" , false ); public TestPlugin ( PluginManager pluginManager ) { super ( pluginManager ); } @Override public void setup () { // register the subscription event handler that reacts on subscriptions tipeeeIn . get (). registerSubscriptionEventHandler ( new SubHandler ()); } @Override public void loop () { } @Override public void shutdown () { log ( \"Shutdown!\" ); } private class SubHandler implements Consumer < TipeeestreamSubscriptionEvent > { @Override public void accept ( TipeeestreamSubscriptionEvent event ) { TipeeestreamSubscription sub = event . getInfo (); // print information about the event to the log log ( sub . getSubscriber (). getDisplayName () + \" subscribed. Resub streak: \" + sub . getResub ()); } } }","title":"Plugin development with TipeeeStream Event Input"},{"location":"services/Twitch-Chat/","text":"The Twitch chat service allows plugins to connect to a channels chat by using IRC. They can get a List of recent messages, listen for new messages or send messages to the chat. Credentials \u00b6 oauth (required) \u00b6 The authentication token for accessing the Twitch IRC chat with your account. If you don't have such a token yet you can generate it on https://twitchapps.com/tmi/. Just log into your Twitch account and copy the token. Then add it as a credentials value with the key oauth as described here . Note: Copy the entire key including the oauth: at the beginning. Plugin development with Twitch Chat Input \u00b6 Have a look at this simple example plugin that uses an event handler to log all messages and displays the amount of messages every 5 seconds: For more information have a look at the javadoc . 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 import java.util.function.Consumer ; import java.util.List ; import org.codeoverflow.chatoverflow.api.plugin.configuration.Requirement ; import org.codeoverflow.chatoverflow.api.io.input.chat.TwitchChatInput ; import org.codeoverflow.chatoverflow.api.plugin.PluginImpl ; import org.codeoverflow.chatoverflow.api.plugin.PluginManager ; import org.codeoverflow.chatoverflow.api.io.event.chat.twitch.TwitchChatMessageReceiveEvent ; import org.codeoverflow.chatoverflow.api.io.dto.chat.twitch.TwitchChatMessage ; public class TestPlugin extends PluginImpl { //require a new Twitch chat input private Requirement < TwitchChatInput > twitchIn = require . input . twitchChat ( \"twitchChat\" , \"The Twitch chat\" , false ); public TestPlugin ( PluginManager pluginManager ) { super ( pluginManager ); //Set the loop to repeat every 5 seconds (default 1 second) loopInterval = 5000 ; } @Override public void setup () { //set the channel for which we want to get the messages twitchIn . get (). setChannel ( \"#skate702\" ); log ( \"Connected to skate702s Twitch chat!\" ); //register the message handler that reacts on incoming messages twitchIn . get (). registerChatMessageReceiveEventHandler ( new MessageHandler ()); } @Override public void loop () { //get the recent messages List < TwitchChatMessage > messages = twitchIn . get (). getLastMessages ( getLoopInterval ()); //calculate rate of messages per second double rate = messages . size () / ( loopInterval / 1000.0 ); log ( \"Users are chatting at a rate of \" + rate + \" messages per second\" ); } @Override public void shutdown () { log ( \"Shutdown!\" ); } private class MessageHandler implements Consumer < TwitchChatMessageReceiveEvent > { @Override public void accept ( TwitchChatMessageReceiveEvent event ) { TwitchChatMessage message = event . getMessage (); //print the incoming message to the log (including the author) log ( \"[Twitch Chat]\" + message . toString ()); } } } Plugin development with Twitch Chat Output \u00b6 Have a look at this simple example plugin that posts the current time to the chat every minute. For more information have a look at the javadoc . 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 import java.util.function.Consumer ; import java.util.List ; import java.time.LocalTime ; import java.time.format.DateTimeFormatter ; import org.codeoverflow.chatoverflow.api.plugin.configuration.Requirement ; import org.codeoverflow.chatoverflow.api.io.output.chat.TwitchChatOutput ; import org.codeoverflow.chatoverflow.api.plugin.PluginImpl ; import org.codeoverflow.chatoverflow.api.plugin.PluginManager ; public class TestPlugin extends PluginImpl { //require a new Twitch chat output private Requirement < TwitchChatOutput > twitchOut = require . output . twitchChat ( \"twitchChat\" , \"The Twitch chat\" , false ); public TestPlugin ( PluginManager pluginManager ) { super ( pluginManager ); //Set the loop to repeat every 5 minutes (default 1 second) loopInterval = 5 * 60 * 1000 ; } @Override public void setup () { //set the channel to which we want send the messages twitchOut . get (). setChannel ( \"#skate702\" ); log ( \"Connected to skate702s Twitch chat!\" ); } @Override public void loop () { String timeMessage = \"Es ist \" + LocalTime . now (). format ( DateTimeFormatter . ISO_LOCAL_TIME ) + \" Uhr!\" ; log ( timeMessage ); //Output the message to the Twitch chat twitchOut . get (). sendChatMessage ( timeMessage ); } @Override public void shutdown () { log ( \"Shutdown!\" ); } }","title":"Twitch Chat"},{"location":"services/Twitch-Chat/#credentials","text":"","title":"Credentials"},{"location":"services/Twitch-Chat/#oauth-required","text":"The authentication token for accessing the Twitch IRC chat with your account. If you don't have such a token yet you can generate it on https://twitchapps.com/tmi/. Just log into your Twitch account and copy the token. Then add it as a credentials value with the key oauth as described here . Note: Copy the entire key including the oauth: at the beginning.","title":"oauth (required)"},{"location":"services/Twitch-Chat/#plugin-development-with-twitch-chat-input","text":"Have a look at this simple example plugin that uses an event handler to log all messages and displays the amount of messages every 5 seconds: For more information have a look at the javadoc . 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 import java.util.function.Consumer ; import java.util.List ; import org.codeoverflow.chatoverflow.api.plugin.configuration.Requirement ; import org.codeoverflow.chatoverflow.api.io.input.chat.TwitchChatInput ; import org.codeoverflow.chatoverflow.api.plugin.PluginImpl ; import org.codeoverflow.chatoverflow.api.plugin.PluginManager ; import org.codeoverflow.chatoverflow.api.io.event.chat.twitch.TwitchChatMessageReceiveEvent ; import org.codeoverflow.chatoverflow.api.io.dto.chat.twitch.TwitchChatMessage ; public class TestPlugin extends PluginImpl { //require a new Twitch chat input private Requirement < TwitchChatInput > twitchIn = require . input . twitchChat ( \"twitchChat\" , \"The Twitch chat\" , false ); public TestPlugin ( PluginManager pluginManager ) { super ( pluginManager ); //Set the loop to repeat every 5 seconds (default 1 second) loopInterval = 5000 ; } @Override public void setup () { //set the channel for which we want to get the messages twitchIn . get (). setChannel ( \"#skate702\" ); log ( \"Connected to skate702s Twitch chat!\" ); //register the message handler that reacts on incoming messages twitchIn . get (). registerChatMessageReceiveEventHandler ( new MessageHandler ()); } @Override public void loop () { //get the recent messages List < TwitchChatMessage > messages = twitchIn . get (). getLastMessages ( getLoopInterval ()); //calculate rate of messages per second double rate = messages . size () / ( loopInterval / 1000.0 ); log ( \"Users are chatting at a rate of \" + rate + \" messages per second\" ); } @Override public void shutdown () { log ( \"Shutdown!\" ); } private class MessageHandler implements Consumer < TwitchChatMessageReceiveEvent > { @Override public void accept ( TwitchChatMessageReceiveEvent event ) { TwitchChatMessage message = event . getMessage (); //print the incoming message to the log (including the author) log ( \"[Twitch Chat]\" + message . toString ()); } } }","title":"Plugin development with Twitch Chat Input"},{"location":"services/Twitch-Chat/#plugin-development-with-twitch-chat-output","text":"Have a look at this simple example plugin that posts the current time to the chat every minute. For more information have a look at the javadoc . 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 import java.util.function.Consumer ; import java.util.List ; import java.time.LocalTime ; import java.time.format.DateTimeFormatter ; import org.codeoverflow.chatoverflow.api.plugin.configuration.Requirement ; import org.codeoverflow.chatoverflow.api.io.output.chat.TwitchChatOutput ; import org.codeoverflow.chatoverflow.api.plugin.PluginImpl ; import org.codeoverflow.chatoverflow.api.plugin.PluginManager ; public class TestPlugin extends PluginImpl { //require a new Twitch chat output private Requirement < TwitchChatOutput > twitchOut = require . output . twitchChat ( \"twitchChat\" , \"The Twitch chat\" , false ); public TestPlugin ( PluginManager pluginManager ) { super ( pluginManager ); //Set the loop to repeat every 5 minutes (default 1 second) loopInterval = 5 * 60 * 1000 ; } @Override public void setup () { //set the channel to which we want send the messages twitchOut . get (). setChannel ( \"#skate702\" ); log ( \"Connected to skate702s Twitch chat!\" ); } @Override public void loop () { String timeMessage = \"Es ist \" + LocalTime . now (). format ( DateTimeFormatter . ISO_LOCAL_TIME ) + \" Uhr!\" ; log ( timeMessage ); //Output the message to the Twitch chat twitchOut . get (). sendChatMessage ( timeMessage ); } @Override public void shutdown () { log ( \"Shutdown!\" ); } }","title":"Plugin development with Twitch Chat Output"},{"location":"usage/Frequent-Issues/","text":"Run Configuration Bug \u00b6 Because of the differences in IntelliJ versions the run configurations could be broken. If they are broken, change the classpath or module setting in Edit configurations... to ChatOverflow root module ( chatoverflow ). Now everything should be working fine again. Credentials value encrypted with wrong auth key \u00b6 1 ERROR configuration.CryptoUtil$ - Your environment does not work with AES256.Please update your Java runtime version to at least: 1.8.0_161 If you see this image or error message you are probably running on an old Java version that doesn't work with AES 256 bit encryption. To fix this error you have to update Java to version 1.8.0_161 or later. More information about this issue can be found on stackoverflow.com . \"GUI not found\" error message \u00b6 A common problem is the message \"GUI couldn't be found on the classpath! Has the GUI been built?\" when building the gui or everything freshly, using the [Advanced] -configuration. This is due to a IntelliJ bug / problem. Solution: Use the Refresh sbt project button, inside IntelliJ. This should make IntelliJ find, load and start the GUI component. It can be found inside the sbt overlay window:","title":"Frequent Issues"},{"location":"usage/Frequent-Issues/#run-configuration-bug","text":"Because of the differences in IntelliJ versions the run configurations could be broken. If they are broken, change the classpath or module setting in Edit configurations... to ChatOverflow root module ( chatoverflow ). Now everything should be working fine again.","title":"Run Configuration Bug"},{"location":"usage/Frequent-Issues/#credentials-value-encrypted-with-wrong-auth-key","text":"1 ERROR configuration.CryptoUtil$ - Your environment does not work with AES256.Please update your Java runtime version to at least: 1.8.0_161 If you see this image or error message you are probably running on an old Java version that doesn't work with AES 256 bit encryption. To fix this error you have to update Java to version 1.8.0_161 or later. More information about this issue can be found on stackoverflow.com .","title":"Credentials value encrypted with wrong auth key"},{"location":"usage/Frequent-Issues/#gui-not-found-error-message","text":"A common problem is the message \"GUI couldn't be found on the classpath! Has the GUI been built?\" when building the gui or everything freshly, using the [Advanced] -configuration. This is due to a IntelliJ bug / problem. Solution: Use the Refresh sbt project button, inside IntelliJ. This should make IntelliJ find, load and start the GUI component. It can be found inside the sbt overlay window:","title":"\"GUI not found\" error message"},{"location":"usage/Installation/","text":"This short tutorial is meant for end users of ChatOverflow and shows how to install and run the framework with all dependencies. If you want to set up a build environment for developing plugins or to contribute to the framework, head over to Build Environment . Prerequisites \u00b6 For running ChatOverflow you will need Java 8, version 1.8.0_161 or later. However we recommend that you instead use at least java 9, because it is able to re-use commonly used dependencies between plugins like the Scala Library. Java 8 re-loads these dependencies for each plugin that uses thems and keeps seperate copies of the classes in memory, thus the memory usage with Java 8 is higher. You can download it here . Installation \u00b6 Head over to the releases tab and download the ChatOverflow .zip file from the assets section of the latest release. Extract the zip file. (It's clever to extract it in a folder called chatoverflow \ud83d\ude09) If you are on Windows, execute ChatOverflow.bat . If you are on an UNIX operating system like MacOS or Linux execute ChatOverflow.sh . Wait for the launcher to download all dependencies. \u23f3 The framework will start. Have fun using it! \ud83d\ude03 To start the framework again, just re-execute the script ( ChatOverflow.bat or ChatOverflow.sh , depending on your system). Don't worry, it won't download the dependencies again.","title":"Installation"},{"location":"usage/Installation/#prerequisites","text":"For running ChatOverflow you will need Java 8, version 1.8.0_161 or later. However we recommend that you instead use at least java 9, because it is able to re-use commonly used dependencies between plugins like the Scala Library. Java 8 re-loads these dependencies for each plugin that uses thems and keeps seperate copies of the classes in memory, thus the memory usage with Java 8 is higher. You can download it here .","title":"Prerequisites"},{"location":"usage/Installation/#installation","text":"Head over to the releases tab and download the ChatOverflow .zip file from the assets section of the latest release. Extract the zip file. (It's clever to extract it in a folder called chatoverflow \ud83d\ude09) If you are on Windows, execute ChatOverflow.bat . If you are on an UNIX operating system like MacOS or Linux execute ChatOverflow.sh . Wait for the launcher to download all dependencies. \u23f3 The framework will start. Have fun using it! \ud83d\ude03 To start the framework again, just re-execute the script ( ChatOverflow.bat or ChatOverflow.sh , depending on your system). Don't worry, it won't download the dependencies again.","title":"Installation"},{"location":"usage/Using-Parameters/","text":"Plugin Developers can request custom input from a user using Parameters . There are currently the following prameters: String Parameter Integer Parameter Double Parameter Boolean Parameter URI Parameter Color Parameter List Parameter Date Parameter Time Parameter Date Time Parameter String parameter \u00b6 The string parameter requires you to enter a string. Example: The snow is snowier than before Example for developers (Java): 1 2 3 4 5 6 private Requirement < StringParameter > motd = require . parameter . stringParameter ( \"motd\" ); @Override public void setup () { log ( \"Message of the day: \" + motd . get (). get ()); } Integer parameter \u00b6 The integer parameter requires you to enter an integer number. Example: 5 , 7 , -10 Example for developers (Java): 1 2 3 4 5 private Requirement < IntegerParameter > age = require . parameter . integerParameter ( \"age\" ); @Override public void setup () { log ( \"You are \" + age . get (). get () + \" years old.\" ); } Double parameter \u00b6 The double parameter requires you to enter a floating point number. Example: 3.14159265359 , 5 , -10.5 Example for developers (Java): 1 2 3 4 5 private Requirement < DoubleParameter > size = require . parameter . doubleParameter ( \"size\" ); @Override public void setup () { log ( \"You are \" + size . get (). get () + \" meters tall.\" ); } Boolean parameter \u00b6 The boolean parameter requires you to enter a boolean. Note that any input that isn't true will default to false. Example: true , false Example for developers (Java): 1 2 3 4 5 6 7 private Requirement < BooleanParameter > debug = require . parameter . booleanParameter ( \"debug\" ); @Override public void setup () { if ( debug . get (). get ()) { log ( \"Debug mode has been activated.\" ); } } URI parameter \u00b6 The URI parameter reqires you to enter an Uniform Resource Identifier , most comonly a link to a website. Example: donate/to/team.txt , trees.html , org.jpg , http://www.codeoverflow.org/ Example for developers (java): 1 2 3 4 5 private Requirement < UriParameter > twitchURL = require . parameter . uriParameter ( \"twitchURL\" ); @Override public void setup () { log ( \"Your twitch URL is: \" + twitchURL . get (). get (). toString ()); } Color parameter \u00b6 The color parameter requires you to enter a Color. The color has to be in one of the following formats: (R = Red, G = Green, B = Blue, A = Alpha) #RRGGBB or #RRGGBBAA : The color in hexadecimal (0-9, A-F). R,G,B or R,G,B,A : The color in integer numbers (0-255) or floting point numbers (0.0-1.0) Example: #FFFFFF , 251,121,1 , #FFFF00BB , 255,255,255,10 , 1.0,1.0,0.5,1.0 , 1.0,0.7,0.3 Example for developers: 1 2 3 4 5 private Requirement < ColorParameter > favColor = require . parameter . colorParameter ( \"favColor\" ); @Override public void setup () { log ( \"Your favorite Color is: \" + favColor . get (). get (). getRed () + \" \" + favColor . get (). get (). getGreen () + \" \" + favColor . get (). get (). getGreen ()); } List parameter \u00b6 The list parameter requires you to enter a list. You have to seperate entries by using a comma. Example: i,like,trees , message , do you like,this wiki entry? Example for developers (Java): 1 2 3 4 5 6 7 8 private Requirement < ListParameter > messages = require . parameter . listParameter ( \"messages\" ); @Override public void setup () { log ( \"You entered the following messages:\" ); for ( String string : messages . get (). get ()) { log ( string ); } } Map parameter \u00b6 The map parameter requires you to enter a map. A map uses the following format: key;value or (key;value) . You have to seperate entries by using a comma. Example: (website;https://github.com/codeoverflow-org/chatoverflow) , twitch;prime , (key1:value1),(key2;value2) , key1:value1,key2;value2 Example for developers (Java): 1 2 3 4 5 6 7 8 private Requirement < MapParameter > commands = require . parameter . mapParameter ( \"commands\" ); @Override public void setup () { log ( \"You're using the following commands:\" ); for ( String key : commands . get (). get (). keySet ()) { log ( key + \": \" + commands . get (). get (). get ( key )); } } Date parameter \u00b6 The date parameter requires you to enter a valid date following the ISO-8601 standard . It is defined as: YYYY-MM-DD ( Y = year, M = month, D = day) Example: 2011-12-30 , 2019-11-09 Example for developers (Java): 1 2 3 4 5 private Requirement < DateParameter > exam = require . parameter . dateParameter ( \"exam\" ); @Override public void setup () { log ( \"Your exam is at \" + exam . get (). get (). toString ()); } Time parameter \u00b6 The time parameter requires you to enter a valid time following the ISO-8601 standard . It is defined as: HH:MM:SS ( H = hour, M = minute, S = second) or HH:MM Example: 10:15 , 18:36:10 Example for developers (Java): 1 2 3 4 5 private Requirement < TimeParameter > alarm = require . parameter . timeParameter ( \"alarm\" ); @Override public void setup () { log ( \"The alarm is set to \" + alarm . get (). get (). toString ()); } Date Time parameter \u00b6 The date time parameter requires you to enter a valid time at a specific date following the ISO-8601 standard . It is defined as: YYYY-MM-DDThh:mm:ss ( Y = year, M = month, D = day, h = hour, m = minute, s = second) or YYYY-MM-DDThh:mm Example: 2011-12-30T10:15:30 , 2019-11-09T18:40 Example for developers (Java): 1 2 3 4 5 6 7 private Requirement < DateTimeParameter > appointment = require . parameter . dateTimeParameter ( \"appointment\" ); @Override public void setup () { log ( \"Yo have an appointment on \" + appointment . get (). get (). toLocalDate (). toString () + \" at \" + appointment . get (). get (). toLocalTime (). toString ()); }","title":"Using Parameters"},{"location":"usage/Using-Parameters/#string-parameter","text":"The string parameter requires you to enter a string. Example: The snow is snowier than before Example for developers (Java): 1 2 3 4 5 6 private Requirement < StringParameter > motd = require . parameter . stringParameter ( \"motd\" ); @Override public void setup () { log ( \"Message of the day: \" + motd . get (). get ()); }","title":"String parameter"},{"location":"usage/Using-Parameters/#integer-parameter","text":"The integer parameter requires you to enter an integer number. Example: 5 , 7 , -10 Example for developers (Java): 1 2 3 4 5 private Requirement < IntegerParameter > age = require . parameter . integerParameter ( \"age\" ); @Override public void setup () { log ( \"You are \" + age . get (). get () + \" years old.\" ); }","title":"Integer parameter"},{"location":"usage/Using-Parameters/#double-parameter","text":"The double parameter requires you to enter a floating point number. Example: 3.14159265359 , 5 , -10.5 Example for developers (Java): 1 2 3 4 5 private Requirement < DoubleParameter > size = require . parameter . doubleParameter ( \"size\" ); @Override public void setup () { log ( \"You are \" + size . get (). get () + \" meters tall.\" ); }","title":"Double parameter"},{"location":"usage/Using-Parameters/#boolean-parameter","text":"The boolean parameter requires you to enter a boolean. Note that any input that isn't true will default to false. Example: true , false Example for developers (Java): 1 2 3 4 5 6 7 private Requirement < BooleanParameter > debug = require . parameter . booleanParameter ( \"debug\" ); @Override public void setup () { if ( debug . get (). get ()) { log ( \"Debug mode has been activated.\" ); } }","title":"Boolean parameter"},{"location":"usage/Using-Parameters/#uri-parameter","text":"The URI parameter reqires you to enter an Uniform Resource Identifier , most comonly a link to a website. Example: donate/to/team.txt , trees.html , org.jpg , http://www.codeoverflow.org/ Example for developers (java): 1 2 3 4 5 private Requirement < UriParameter > twitchURL = require . parameter . uriParameter ( \"twitchURL\" ); @Override public void setup () { log ( \"Your twitch URL is: \" + twitchURL . get (). get (). toString ()); }","title":"URI parameter"},{"location":"usage/Using-Parameters/#color-parameter","text":"The color parameter requires you to enter a Color. The color has to be in one of the following formats: (R = Red, G = Green, B = Blue, A = Alpha) #RRGGBB or #RRGGBBAA : The color in hexadecimal (0-9, A-F). R,G,B or R,G,B,A : The color in integer numbers (0-255) or floting point numbers (0.0-1.0) Example: #FFFFFF , 251,121,1 , #FFFF00BB , 255,255,255,10 , 1.0,1.0,0.5,1.0 , 1.0,0.7,0.3 Example for developers: 1 2 3 4 5 private Requirement < ColorParameter > favColor = require . parameter . colorParameter ( \"favColor\" ); @Override public void setup () { log ( \"Your favorite Color is: \" + favColor . get (). get (). getRed () + \" \" + favColor . get (). get (). getGreen () + \" \" + favColor . get (). get (). getGreen ()); }","title":"Color parameter"},{"location":"usage/Using-Parameters/#list-parameter","text":"The list parameter requires you to enter a list. You have to seperate entries by using a comma. Example: i,like,trees , message , do you like,this wiki entry? Example for developers (Java): 1 2 3 4 5 6 7 8 private Requirement < ListParameter > messages = require . parameter . listParameter ( \"messages\" ); @Override public void setup () { log ( \"You entered the following messages:\" ); for ( String string : messages . get (). get ()) { log ( string ); } }","title":"List parameter"},{"location":"usage/Using-Parameters/#map-parameter","text":"The map parameter requires you to enter a map. A map uses the following format: key;value or (key;value) . You have to seperate entries by using a comma. Example: (website;https://github.com/codeoverflow-org/chatoverflow) , twitch;prime , (key1:value1),(key2;value2) , key1:value1,key2;value2 Example for developers (Java): 1 2 3 4 5 6 7 8 private Requirement < MapParameter > commands = require . parameter . mapParameter ( \"commands\" ); @Override public void setup () { log ( \"You're using the following commands:\" ); for ( String key : commands . get (). get (). keySet ()) { log ( key + \": \" + commands . get (). get (). get ( key )); } }","title":"Map parameter"},{"location":"usage/Using-Parameters/#date-parameter","text":"The date parameter requires you to enter a valid date following the ISO-8601 standard . It is defined as: YYYY-MM-DD ( Y = year, M = month, D = day) Example: 2011-12-30 , 2019-11-09 Example for developers (Java): 1 2 3 4 5 private Requirement < DateParameter > exam = require . parameter . dateParameter ( \"exam\" ); @Override public void setup () { log ( \"Your exam is at \" + exam . get (). get (). toString ()); }","title":"Date parameter"},{"location":"usage/Using-Parameters/#time-parameter","text":"The time parameter requires you to enter a valid time following the ISO-8601 standard . It is defined as: HH:MM:SS ( H = hour, M = minute, S = second) or HH:MM Example: 10:15 , 18:36:10 Example for developers (Java): 1 2 3 4 5 private Requirement < TimeParameter > alarm = require . parameter . timeParameter ( \"alarm\" ); @Override public void setup () { log ( \"The alarm is set to \" + alarm . get (). get (). toString ()); }","title":"Time parameter"},{"location":"usage/Using-Parameters/#date-time-parameter","text":"The date time parameter requires you to enter a valid time at a specific date following the ISO-8601 standard . It is defined as: YYYY-MM-DDThh:mm:ss ( Y = year, M = month, D = day, h = hour, m = minute, s = second) or YYYY-MM-DDThh:mm Example: 2011-12-30T10:15:30 , 2019-11-09T18:40 Example for developers (Java): 1 2 3 4 5 6 7 private Requirement < DateTimeParameter > appointment = require . parameter . dateTimeParameter ( \"appointment\" ); @Override public void setup () { log ( \"Yo have an appointment on \" + appointment . get (). get (). toLocalDate (). toString () + \" at \" + appointment . get (). get (). toLocalTime (). toString ()); }","title":"Date Time parameter"},{"location":"usage/Using-the-CLI/","text":"Chat overflow may be configured using the CLI. While running, the easiest way to control everything is the Better REPL , accessible through http://localhost:2400 . Command Line Interface \u00b6 This messages shows up when you execute the framework with the flag --help : 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 Chat Overflow x . x Usage : Chat Overflow [ options ] - p , --pluginFolder <value> path to a folder with packaged plugin jar files - c , --configFolder <value> path to the folder to save configs and credentials - r , --requirementPackage <value> path to the package where all requirements are defined - l , --login <value> the password to login to chat overflow on framework startup - s , --start <value> a comma-separated list of plugin instances to start after login (has to be combined with -l) - d , --pluginDataFolder <value> path to the data folder , accessible from within plugins - w , --webServerPort <value> default web server port , used eg . for the rest api and web gui - o , --enablePluginOutput set this flag to enable plugin log output on console - f , --enableLogFile set this flag to enable logging to log files For more information , please visit http : // codeoverflow . org / Attention: \u00b6 Currently there is a bug that prevents custom web server ports from working properly. \u00b6 See #149 . \u00b6 Configuration \u00b6 You can also configure the paths of config- and credentials-files to create custom setups: 1 -c customConfigFolder -p customPluginFolder The combination of logging in and starting plugins with one command is very useful for rapid prototyping. 1 -l myPassword -s startupPluginInstance1,startupPluginInstance2 By default the log output of a plugin on the console is disabled. You can enable it with the flag -o .","title":"Using the CLI"},{"location":"usage/Using-the-CLI/#command-line-interface","text":"This messages shows up when you execute the framework with the flag --help : 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 Chat Overflow x . x Usage : Chat Overflow [ options ] - p , --pluginFolder <value> path to a folder with packaged plugin jar files - c , --configFolder <value> path to the folder to save configs and credentials - r , --requirementPackage <value> path to the package where all requirements are defined - l , --login <value> the password to login to chat overflow on framework startup - s , --start <value> a comma-separated list of plugin instances to start after login (has to be combined with -l) - d , --pluginDataFolder <value> path to the data folder , accessible from within plugins - w , --webServerPort <value> default web server port , used eg . for the rest api and web gui - o , --enablePluginOutput set this flag to enable plugin log output on console - f , --enableLogFile set this flag to enable logging to log files For more information , please visit http : // codeoverflow . org /","title":"Command Line Interface"},{"location":"usage/Using-the-CLI/#attention","text":"","title":"Attention:"},{"location":"usage/Using-the-CLI/#currently-there-is-a-bug-that-prevents-custom-web-server-ports-from-working-properly","text":"","title":"Currently there is a bug that prevents custom web server ports from working properly."},{"location":"usage/Using-the-CLI/#see-149","text":"","title":"See #149."},{"location":"usage/Using-the-CLI/#configuration","text":"You can also configure the paths of config- and credentials-files to create custom setups: 1 -c customConfigFolder -p customPluginFolder The combination of logging in and starting plugins with one command is very useful for rapid prototyping. 1 -l myPassword -s startupPluginInstance1,startupPluginInstance2 By default the log output of a plugin on the console is disabled. You can enable it with the flag -o .","title":"Configuration"},{"location":"usage/Using-the-GUI/","text":"The GUI for chatoverflow is still in development. That's why we have the Better REPL , an easy-to-use one-page dashboard, where everything can be controlled. Starting the Better REPL \u00b6 When using the GUI for the first time use the [Advanced] run configuration that packages the gui. Make sure to reload sbt afterwards to make IntelliJ find and load the gui. For all further runs you may use the [Simple] run configuration which is way faster. Once the framework is running open http://localhost:2400/ in a browser and wait for the server status to display Connected! . Now click on OPEN BETTER REPL . When running for the first time enter a password that you want to use for securing your credentials and click on REGISTER . If you are already registered, use your password to login. If the login was successful the gui will display the authentication key for this session. Creating a plugin instance \u00b6 Before running a plugin you have to create a plugin instance. All available plugins are listed under Plugin types . Add more plugins by putting the plugin .jar files into the plugins folder. If you are adding new plugins to the folder while the framework is still running, you need to restart the framework in order for it to load the newly added plugins. Enter the plugin and author name of the plugin and give the instance a name (whatever you like), then click on CREATE : The plugin instance should now be listed under Plugin instances : You can use the pen to copy the name of an instance. There are buttons that allow you to START / STOP an instance, to show its log (if running) or requirements and a button to DELETE the instance (just make sure to stop it before deleting it). Setting plugin requirements \u00b6 Before you can start a plugin you need to set its requirements. A plugin can require a lot of things, for example Strings, Inputs or Outputs. To view all requirements of a plugin enter the instance name and click on SHOW REQUIREMENTS . You see that each requirement has a type and needs a value. You see which requirements are already set and which ones are optional. To set or change the value click on the blue pen, enter the required value and click on PUT . For inputs and outputs the value should be the source identifier of a connector - which you first have to define. Adding connectors \u00b6 To add a connector use whatever source identifier you like, specify the connector type (a list of all types can be found in the connector types box above) and click ADD . It will then be displayed in the list on the left side. Set credentials \u00b6 Every connector requires you to set the credentials for that service. Some of them are required for the connector to work and some are optional. Click on the Request details... link. Then the gui will display if the connector is running and which credentials should be set. Underlined ones are required, the plain ones are optional. Use the blue pen to copy the key, the identifier and the type of the connector and then use the manage credentials field to add the value of the credentials. If you are getting errors when adding credentials Frequent-Issues might contain a solution. Please note: Added credentials are encrypted with AES 128/256. The password is not stored anywhere. If you loose your password, there will be no way to reuse your configured and saved credentials.","title":"Using the GUI"},{"location":"usage/Using-the-GUI/#starting-the-better-repl","text":"When using the GUI for the first time use the [Advanced] run configuration that packages the gui. Make sure to reload sbt afterwards to make IntelliJ find and load the gui. For all further runs you may use the [Simple] run configuration which is way faster. Once the framework is running open http://localhost:2400/ in a browser and wait for the server status to display Connected! . Now click on OPEN BETTER REPL . When running for the first time enter a password that you want to use for securing your credentials and click on REGISTER . If you are already registered, use your password to login. If the login was successful the gui will display the authentication key for this session.","title":"Starting the Better REPL"},{"location":"usage/Using-the-GUI/#creating-a-plugin-instance","text":"Before running a plugin you have to create a plugin instance. All available plugins are listed under Plugin types . Add more plugins by putting the plugin .jar files into the plugins folder. If you are adding new plugins to the folder while the framework is still running, you need to restart the framework in order for it to load the newly added plugins. Enter the plugin and author name of the plugin and give the instance a name (whatever you like), then click on CREATE : The plugin instance should now be listed under Plugin instances : You can use the pen to copy the name of an instance. There are buttons that allow you to START / STOP an instance, to show its log (if running) or requirements and a button to DELETE the instance (just make sure to stop it before deleting it).","title":"Creating a plugin instance"},{"location":"usage/Using-the-GUI/#setting-plugin-requirements","text":"Before you can start a plugin you need to set its requirements. A plugin can require a lot of things, for example Strings, Inputs or Outputs. To view all requirements of a plugin enter the instance name and click on SHOW REQUIREMENTS . You see that each requirement has a type and needs a value. You see which requirements are already set and which ones are optional. To set or change the value click on the blue pen, enter the required value and click on PUT . For inputs and outputs the value should be the source identifier of a connector - which you first have to define.","title":"Setting plugin requirements"},{"location":"usage/Using-the-GUI/#adding-connectors","text":"To add a connector use whatever source identifier you like, specify the connector type (a list of all types can be found in the connector types box above) and click ADD . It will then be displayed in the list on the left side.","title":"Adding connectors"},{"location":"usage/Using-the-GUI/#set-credentials","text":"Every connector requires you to set the credentials for that service. Some of them are required for the connector to work and some are optional. Click on the Request details... link. Then the gui will display if the connector is running and which credentials should be set. Underlined ones are required, the plain ones are optional. Use the blue pen to copy the key, the identifier and the type of the connector and then use the manage credentials field to add the value of the credentials. If you are getting errors when adding credentials Frequent-Issues might contain a solution. Please note: Added credentials are encrypted with AES 128/256. The password is not stored anywhere. If you loose your password, there will be no way to reuse your configured and saved credentials.","title":"Set credentials"}]}